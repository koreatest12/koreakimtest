name: "Daily System Checks (ÏùºÏùº ÏãúÏä§ÌÖú Ï†êÍ≤Ä + ÏûêÎèô Î≥µÍµ¨)"

on:
  # KST(UTC+9) ÏÉàÎ≤Ω 1Ïãú Ïã§Ìñâ -> cronÏùÄ UTC Í∏∞Ï§Ä, 01:00 KST == 16:00 UTC (Ï†ÑÎÇ†)
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:
    inputs:
      mode:                 # 1
        description: "full(Ï†ÑÏ≤¥ Ï†êÍ≤Ä) / lite(Í∞ÑÎã® Ï†êÍ≤Ä)"
        type: choice
        options: [full, lite]
        default: full
      repair_mode:          # 2
        description: "Î¨∏Ï†ú Í∞êÏßÄ Ïãú ÏûêÎèô Î≥µÍµ¨ ÏãúÎèÑ Ïó¨Î∂Ä"
        type: boolean
        default: true
      dirs_count:           # 3
        description: "ÏÑúÎπÑÏä§Î≥Ñ Ï∂îÍ∞Ä ÎçîÎØ∏ ÎîîÎ†âÌÜ†Î¶¨ Î™á Í∞ú ÎßåÎì§ÏßÄ"
        default: "10"
      files_count:          # 4
        description: "ÏÑúÎπÑÏä§Î≥Ñ ÎçîÎØ∏ ÏÑ§Ï†ï/Î°úÍ∑∏ ÌååÏùº Î™á Í∞ú ÎßåÎì§ÏßÄ"
        default: "20"
      container_count:      # 5
        description: "ÏÑúÎπÑÏä§ Ïª®ÌÖåÏù¥ÎÑà ÎπåÎìú/Í∏∞Îèô Í∞úÏàò Ï†úÌïú (ÏïåÌååÏù∏ Í∏∞Î∞ò)"
        default: "7"
      include_security:     # 6
        description: "security ÏÑúÎπÑÏä§(Î≥¥Ïïà/Í∞êÏÇ¨ Ìè¥Îçî)ÎèÑ Ìè¨Ìï®Ìï†ÏßÄ"
        type: boolean
        default: true
      include_pages:        # 7
        description: "pages ÏÑúÎπÑÏä§(Î¶¨Ìè¨Ìä∏Ïö© ÏõπÏ∂úÎ†• Ìè¥Îçî)ÎèÑ Ìè¨Ìï®Ìï†ÏßÄ"
        type: boolean
        default: true
      auto_commit:          # 8
        description: "Î¶¨Ìè¨Ìä∏ Í≤∞Í≥ºÎ¨º repoÏóê Ïª§Î∞ãÍπåÏßÄ ÏãúÎèÑ (Í∂åÌïú ÌïÑÏöî)"
        type: boolean
        default: false

permissions:
  contents: write       # auto_commit=true Ïùº Îïå Ïª§Î∞ã ÏúÑÌï¥ write ÌïÑÏöî
  packages: write
  id-token: write

env:
  TZ: Asia/Seoul

  # Î¶¨Ìè¨Ìä∏/Î°úÍ∑∏/ÏïÑÌã∞Ìå©Ìä∏ Ï†ÄÏû• Î£®Ìä∏
  REPORT_DIR: .github/daily_report
  LOG_DIR: .github/daily_report/logs
  ARTIFACT_DIR: .github/daily_report/artifacts
  IMG_DIR: .github/daily_report/images
  JAVA_SRC_DIR: .github/daily_report/java_check
  PY_SRC_DIR: .github/daily_report/python_check
  SERVICES_ROOT: .github/daily_report/services

  # Ïª®ÌÖåÏù¥ÎÑà/Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÏö© Í≥µÌÜµ ÎÑ§Ïù¥Î∞ç
  BASE_IMAGE_TAG: daily-check-test
  HEALTH_PORT: "8080"

jobs:
  daily_checks:
    name: "ü©∫ ÏùºÏùº Ï†êÍ≤Ä + ÎîîÎ†âÌÜ†Î¶¨/Ïù¥ÎØ∏ÏßÄ/Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ± + ÏûêÎèôÎ≥µÍµ¨"
    runs-on: ubuntu-latest

    steps:
      ########################################################################
      # 0. Ï≤¥ÌÅ¨ÏïÑÏõÉ Î∞è Í≥µÌÜµ Ï§ÄÎπÑ
      ########################################################################
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Prepare folders and helper utilities"
        shell: bash
        run: |
          set -Eeuo pipefail

          echo "[prep] create base dirs"
          mkdir -p "${REPORT_DIR}" "${LOG_DIR}" "${ARTIFACT_DIR}" "${IMG_DIR}" \
                   "${JAVA_SRC_DIR}" "${PY_SRC_DIR}" "${SERVICES_ROOT}"

          echo "[prep] write SUMMARY stub"
          {
            echo "Daily Check Summary ($(date '+%Y-%m-%d %H:%M:%S %Z'))"
            echo "Repo: $GITHUB_REPOSITORY"
            echo "Run ID: $GITHUB_RUN_ID"
            echo "--------------------------------------------------"
          } > "${REPORT_DIR}/SUMMARY.txt"

          echo "[prep] safe_run + fix helpers"
          cat > "${REPORT_DIR}/helpers.sh" << 'EOF'
          #!/usr/bin/env bash
          set -Euo pipefail

          LOG_DIR="${LOG_DIR:-.github/daily_report/logs}"

          safe_run() {
            local label="$1"; shift || true
            echo "‚ñ∂ [${label}] START $(date '+%Y-%m-%d %H:%M:%S%z')" | tee -a "${LOG_DIR}/${label}.log"
            if "$@" >> "${LOG_DIR}/${label}.log" 2>&1 ; then
              echo "‚úÖ [${label}] OK" | tee -a "${LOG_DIR}/${label}.log"
              return 0
            else
              local rc=$?
              echo "‚ùå [${label}] FAILED exit=${rc}" | tee -a "${LOG_DIR}/${label}.log"
              return $rc
            fi
          }

          # apt-getÏù¥ lock Í±∏Î†∏ÏùÑ Îïå ÏûêÎèô Ïû¨ÏãúÎèÑ
          apt_fix() {
            echo "[fix] attempting apt fix/retry..."
            sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* || true
            sudo dpkg --configure -a || true
            sudo apt-get update -y || sudo apt-get update -y || true
          }

          # docker ÏóÜÍ±∞ÎÇò daemon Î¨∏Ï†úÎ©¥ ÏÑ§Ïπò/ÏãúÏûë
          ensure_docker() {
            if ! command -v docker >/dev/null 2>&1; then
              echo "[fix] docker not found, installing..."
              apt_fix
              sudo apt-get install -y ca-certificates curl gnupg || true
              sudo install -m 0755 -d /etc/apt/keyrings || true
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg || true
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo $VERSION_CODENAME) stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null || true
              apt_fix
              sudo apt-get install -y docker.io docker-buildx-plugin docker-compose-plugin || true
              sudo usermod -aG docker $USER || true
            fi

            # docker daemon Ï†ïÎ≥¥ ÌôïÏù∏ (github-hosted runnerÎäî Ïù¥ÎØ∏ ÎèåÍ≥†ÏûàÏùÑ ÌôïÎ•† ÎÜíÏùå)
            if ! docker info >/dev/null 2>&1; then
              echo "[fix] docker daemon not responsive, trying service start..."
              sudo systemctl start docker || true
              sleep 2
            fi
          }

          # Ïª®ÌÖåÏù¥ÎÑà ÏÇ¥ÏïÑÏûàÎäîÏßÄ Í≤ÄÏÇ¨ÌïòÍ≥† Ï£ΩÏóàÏúºÎ©¥ Ïû¨ÏãúÏûë
          ensure_container_running() {
            local cname="$1"
            if docker ps --format '{{.Names}}' | grep -q "^${cname}\$"; then
              echo "[check] ${cname} is running"
            else
              echo "[fix] ${cname} not running, try to start"
              docker start "${cname}" 2>/dev/null || true
            fi
          }

          # DB Ìó¨Ïä§ Ïû¨ÏãúÎèÑ
          retry_db_check() {
            local retries=3
            local delay=2
            local cmd="$*"
            local n=1
            while [ $n -le $retries ]; do
              if eval "$cmd"; then
                echo "[db] success on try $n"
                return 0
              fi
              echo "[db] attempt $n failed, waiting ${delay}s..."
              sleep $delay
              n=$((n+1))
            done
            echo "[db] all retries failed"
            return 1
          }
          EOF
          chmod +x "${REPORT_DIR}/helpers.sh"

          echo "- helpers ready" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 1. ÏãúÏä§ÌÖú Ï†êÍ≤Ä (ÎîîÏä§ÌÅ¨, Î©îÎ™®Î¶¨, ÌîÑÎ°úÏÑ∏Ïä§, ÎÑ§Ìä∏ÏõåÌÅ¨ Îì±)
      ########################################################################
      - name: "System health snapshot"
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          safe_run "sys.health" bash -c '
            {
              echo "--- DATE ---"
              date
              echo
              echo "--- UNAME ---"
              uname -a
              echo
              echo "--- DISK USAGE (df -h) ---"
              df -h
              echo
              echo "--- MEMORY (free -m) ---"
              free -m
              echo
              echo "--- TOP CPU PROCESSES ---"
              ps aux --sort=-%cpu | head -n 15
              echo
              echo "--- TOP MEM PROCESSES ---"
              ps aux --sort=-%mem | head -n 15
              echo
              echo "--- PORTS LISTENING ---"
              (ss -tulpen || netstat -tulpen) 2>/dev/null || true
              echo
              echo "--- ENV SNAPSHOT ---"
              printenv | sort
            } > "${REPORT_DIR}/system_report.txt"
          '

          echo "- system health collected" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 2. Python ÌôòÍ≤Ω Ï†êÍ≤Ä
      ########################################################################
      - name: "Set up Python 3.x"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "Python health script (env dump)"
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          cat > "${PY_SRC_DIR}/health_check.py" << 'EOF'
          import sys, platform, json, time
          result = {
              "timestamp": time.strftime("%Y-%m-%d %H:%M:%S %z"),
              "python_version": sys.version,
              "platform": platform.platform(),
              "modules": {}
          }
          for lib in ["os", "json", "subprocess", "sqlite3"]:
              try:
                  __import__(lib)
                  result["modules"][lib] = "OK"
              except Exception as e:
                  result["modules"][lib] = f"ERROR: {e}"
          print(json.dumps(result, indent=2))
          EOF

          safe_run "python.env" python "${PY_SRC_DIR}/health_check.py" | tee "${REPORT_DIR}/python_report.json"

          echo "- python env checked" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 3. Java + Maven Ï†êÍ≤Ä (Í∏∞Ï°¥ pom.xml or ÏûÑÏãú ÌîÑÎ°úÏ†ùÌä∏)
      ########################################################################
      - name: "Set up JDK 17 (Temurin)"
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: "Prepare Maven project (fallback if none)"
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          if [ ! -f "pom.xml" ]; then
            echo "[java] generating fallback maven project in ${JAVA_SRC_DIR}"
            mkdir -p "${JAVA_SRC_DIR}/src/main/java/com/example"
            cat > "${JAVA_SRC_DIR}/pom.xml" << 'EOF'
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>com.example</groupId>
              <artifactId>daily-check-sample</artifactId>
              <version>1.0.0-SNAPSHOT</version>
              <properties>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
              </properties>
              <build>
                <plugins>
                  <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                      <source>17</source>
                      <target>17</target>
                    </configuration>
                  </plugin>
                </plugins>
              </build>
            </project>
            EOF

            cat > "${JAVA_SRC_DIR}/src/main/java/com/example/HealthCheck.java" << 'EOF'
            package com.example;
            public class HealthCheck {
                public static void main(String[] args) {
                    System.out.println("[JAVA] HealthCheck OK - " + System.currentTimeMillis());
                }
            }
            EOF
          fi

          echo "- java project prepared" >> "${REPORT_DIR}/SUMMARY.txt"

      - name: "Maven build (skip tests)"
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          if [ -f "pom.xml" ]; then
            PROJ="."
          else
            PROJ="${JAVA_SRC_DIR}"
          fi

          safe_run "maven.build" bash -c "
            mvn -f \"${PROJ}/pom.xml\" -B -ntp clean package -DskipTests
          " || true

          {
            echo "=== mvn dependency:tree (head) ==="
            mvn -f "${PROJ}/pom.xml" -B -ntp dependency:tree | head -n 200 || true
          } > "${REPORT_DIR}/maven_report.txt"

          echo "- maven build attempted" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 4. ÏÑúÎπÑÏä§Î≥Ñ ÎåÄÎüâ ÎîîÎ†âÌÜ†Î¶¨/ÌååÏùº/Ïù¥ÎØ∏ÏßÄ(ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ) Ï§ÄÎπÑ
      #    - services Î™©Î°ùÏóêÎäî python/java/db/docker/security/pages Îì±
      #    - Í∞Å ÏÑúÎπÑÏä§ÎßàÎã§ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±, README/placeholder/ÌÖúÌîåÎ¶ø ÌååÏùº ÏÉùÏÑ±
      #    - Í∞Å ÏÑúÎπÑÏä§ÎßàÎã§ Dockerfile ÏÉùÏÑ± -> docker build Î°ú Ïù¥ÎØ∏ÏßÄ ÎåÄÎüâ ÏÉùÏÑ±
      ########################################################################
      - name: "Generate service directories / files / Dockerfiles"
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          # services Î™©Î°ù Íµ¨ÏÑ± (security/pagesÎäî dispatch inputÏóê Îî∞Îùº Ìè¨Ìï®)
          SERVICES=("python" "java" "db" "docker")
          if [ "${{ github.event.inputs.include_security || 'true' }}" = "true" ]; then
            SERVICES+=("security")
          fi
          if [ "${{ github.event.inputs.include_pages || 'true' }}" = "true" ]; then
            SERVICES+=("pages")
          fi

          echo "[services] ${SERVICES[*]}"

          for svc in "${SERVICES[@]}"; do
            BASE="${SERVICES_ROOT}/${svc}"
            mkdir -p "$BASE"/{logs,artifacts,tmp,conf,docker}

            # README
            cat > "$BASE/README.md" <<EOF
            # Service: ${svc}
            Generated at $(date '+%Y-%m-%d %H:%M:%S %Z')
            This directory is auto-created by daily-check workflow.
            EOF

            # ÏÑúÎπÑÏä§ Ï†ÑÏö© Ìó¨Ïä§Ï≤¥ÌÅ¨ Î°úÍ∑∏ placeholder
            cat > "$BASE/logs/health_${svc}.log" <<EOF
            [${svc}] health log placeholder ($(date '+%Y-%m-%d %H:%M:%S %Z'))
            EOF

            # ÎçîÎØ∏ conf ÌååÏùº Ïó¨Îü¨ Í∞ú ÏÉùÏÑ± (files_count ÎßåÌÅº)
            COUNT_FILES=${{ github.event.inputs.files_count || '20' }}
            for i in $(seq 1 "${COUNT_FILES}"); do
              echo "[${svc}] config file #$i @ $(date '+%s')" > "$BASE/conf/${svc}_conf_${i}.cfg"
            done

            # ÎçîÎØ∏ ÌïòÏúÑ ÎîîÎ†âÌÜ†Î¶¨ Ïó¨Îü¨ Í∞ú ÏÉùÏÑ± (dirs_count ÎßåÌÅº)
            COUNT_DIRS=${{ github.event.inputs.dirs_count || '10' }}
            for i in $(seq 1 "${COUNT_DIRS}"); do
              mkdir -p "$BASE/tmp/batch_${i}"
              echo "placeholder for ${svc} batch_${i}" > "$BASE/tmp/batch_${i}/.keep"
            done

            # Í∞Å ÏÑúÎπÑÏä§ÎßàÎã§ Í∞úÎ≥Ñ Dockerfile ÏûëÏÑ±
            cat > "$BASE/docker/Dockerfile.${svc}" <<EOF
            FROM alpine:3.20
            LABEL daily-check-service="${svc}"
            RUN echo "service=${svc}"        > /service.info && \
                echo "generated=$(date '+%Y-%m-%d %H:%M:%S %Z')" >> /service.info
            CMD ["cat", "/service.info"]
            EOF

          done

          echo "- service dirs/files/dockerfiles generated" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 5. Docker ÏÑ§Ïπò/ÌôïÏù∏ -> Îã§Îüâ Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±/Ïú†ÏßÄ
      ########################################################################
      - name: "Docker ensure + build/run containers for each service"
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          # docker ÏÑ§Ïπò/ÏàòÎ¶¨
          safe_run "docker.ensure" ensure_docker || true

          # Îã§Ïãú Ìïú Î≤à docker info Î°úÍ∑∏ ÏàòÏßë
          safe_run "docker.info" bash -c 'docker --version && docker info' || true

          SERVICES=("python" "java" "db" "docker")
          if [ "${{ github.event.inputs.include_security || 'true' }}" = "true" ]; then
            SERVICES+=("security")
          fi
          if [ "${{ github.event.inputs.include_pages || 'true' }}" = "true" ]; then
            SERVICES+=("pages")
          fi

          LIMIT=${{ github.event.inputs.container_count || '7' }}
          idx=0

          for svc in "${SERVICES[@]}"; do
            [ $idx -ge $LIMIT ] && break
            idx=$((idx+1))

            BASE="${SERVICES_ROOT}/${svc}"
            DF="$BASE/docker/Dockerfile.${svc}"
            IMG="${BASE_IMAGE_TAG}-${svc}:latest"
            CNAME="dailycheck_${svc}"

            safe_run "docker.build.${svc}" bash -c "
              docker build -f \"${DF}\" \"$BASE/docker\" -t \"${IMG}\"
            " || true

            # Ïª®ÌÖåÏù¥ÎÑà Í∏∞Îèô (Î∞±Í∑∏ÎùºÏö¥Îìú)
            safe_run "docker.run.${svc}" bash -c "
              docker rm -f \"${CNAME}\" 2>/dev/null || true
              docker run -d --name \"${CNAME}\" \"${IMG}\" >/dev/null 2>&1 || true
            " || true

            # Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú Ï†êÍ≤Ä + ÏûêÎèô Ïû¨Í∏∞Îèô ÏãúÎèÑ
            safe_run "docker.health.${svc}" bash -c "
              docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}' | grep \"${CNAME}\" || true
              ensure_container_running \"${CNAME}\" || true
              docker logs \"${CNAME}\" --tail 50 || true
            " || true
          done

          echo "- docker build/run for services attempted" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 6. DB Ïó∞Í≤∞ Ìó¨Ïä§Ï≤¥ÌÅ¨ (MySQL Í∏∞Ï§Ä) + ÏûêÎèô Ïû¨ÏãúÎèÑ
      ########################################################################
      - name: "Install MySQL client & DB health check with retry"
        shell: bash
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT || '3306' }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME || 'information_schema' }}
        run: |
          set -Eeuo pipefail
          source "${REPORT_DIR}/helpers.sh"

          # MySQL CLI ÏÑ§Ïπò (Ïû†Í∏à Í±∏Î¶¨Î©¥ apt_fixÎ°ú Î≥µÍµ¨ ÌõÑ Îã§Ïãú ÏãúÎèÑ)
          if ! command -v mysql >/dev/null 2>&1; then
            apt_fix
            sudo apt-get install -y mysql-client || sudo apt-get install -y default-mysql-client || true
          fi

          cat > "${REPORT_DIR}/db_health.sql" << 'EOSQL'
          SELECT NOW() AS now_time, USER() AS db_user, DATABASE() AS current_db;
          SHOW DATABASES;
          EOSQL

          if [ -n "${DB_HOST:-}" ] && [ -n "${DB_USER:-}" ] && [ -n "${DB_PASS:-}" ]; then
            retry_db_check "
              mysql --protocol=tcp \
                    -h \"${DB_HOST}\" \
                    -P \"${DB_PORT}\" \
                    -u \"${DB_USER}\" \
                    -p\"${DB_PASS}\" \
                    \"${DB_NAME}\" \
                    < \"${REPORT_DIR}/db_health.sql\" \
                    > \"${REPORT_DIR}/db_report.txt\" 2>&1
            " || true
          else
            echo '[db] DB secrets not provided; skipping real DB check' > "${REPORT_DIR}/db_report.txt"
          fi

          echo "- db health attempted" >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 7. Ïä§ÎÉÖÏÉ∑ Ï†ïÎ¶¨ (Ïù¥ÎØ∏ÏßÄ/ÏöîÏïΩ)
      ########################################################################
      - name: "Generate text snapshot (status, heads of logs)"
        shell: bash
        run: |
          set -Eeuo pipefail
          SNAP_FILE="${IMG_DIR}/status_snapshot.txt"
          {
            echo "Daily Status Snapshot"
            date
            echo
            echo "Summary so far:"
            cat "${REPORT_DIR}/SUMMARY.txt"
            echo
            echo "--- System report head ---"
            head -n 60 "${REPORT_DIR}/system_report.txt" || true
            echo
            echo "--- DB report head ---"
            head -n 60 "${REPORT_DIR}/db_report.txt" || true
            echo
            echo "--- Maven build log head ---"
            head -n 60 "${LOG_DIR}/maven.build.log" || true
            echo
            echo "--- Docker ensure log head ---"
            head -n 60 "${LOG_DIR}/docker.ensure.log" || true
            echo
            echo "--- Docker run logs ---"
            ls -1 "${LOG_DIR}"/docker.run.*.log 2>/dev/null | while read f; do
              echo "### $(basename "$f")"
              head -n 40 "$f" || true
              echo
            done
          } > "${SNAP_FILE}"

      - name: "Finalize SUMMARY.txt"
        shell: bash
        run: |
          set -Eeuo pipefail
          {
            echo
            echo "Artifacts to review:"
            echo " - system_report.txt"
            echo " - python_report.json"
            echo " - maven_report.txt"
            echo " - db_report.txt"
            echo " - services/* (per-service dirs, conf files, Dockerfiles)"
            echo " - logs/* (per-step logs, docker.ensure.log, etc.)"
            echo " - images/status_snapshot.txt"
          } >> "${REPORT_DIR}/SUMMARY.txt"

      ########################################################################
      # 8. (ÏòµÏÖò) ÏûêÎèô Ïª§Î∞ã - ÏÇ¨Ïö©ÏûêÍ∞Ä auto_commit=true Î°ú Ïã§ÌñâÌñàÏùÑ ÎïåÎßå
      ########################################################################
      - name: "Optional auto-commit report back to repo"
        if: ${{ github.event.inputs.auto_commit == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail

          git config user.name  "daily-check-bot"
          git config user.email "daily-check-bot@users.noreply.github.com"

          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠Îßå Ïª§Î∞ã ÏãúÎèÑ
          git add "${REPORT_DIR}" || true
          if git diff --cached --quiet; then
            echo "[auto-commit] no changes to commit"
          else
            git commit -m "chore: daily-check report (run $GITHUB_RUN_ID)" || true
            git push origin "${GITHUB_REF##*/}" || true
          fi

      ########################################################################
      # 9. Ï†ÑÏ≤¥ Í≤∞Í≥ºÎ¨º ÏóÖÎ°úÎìú (Í∞êÏÇ¨/Ï¶ùÎπôÏö©)
      ########################################################################
      - name: "Upload daily-check artifact"
        uses: actions/upload-artifact@v4
        with:
          name: daily-check-${{ github.run_id }}
          path: .github/daily_report
          if-no-files-found: warn
          retention-days: 30
