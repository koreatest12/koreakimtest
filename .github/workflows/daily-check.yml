name: "Dependency Security Check"

on:
  schedule:
    - cron: "0 3 * * 1"  # 매주 월요일 03:00 UTC
  workflow_dispatch:
  pull_request:
    paths:
      - "**/package.json"
      - "**/package-lock.json"
      - "**/requirements.txt"
      - ".github/workflows/dependency-check.yml"
  push:
    branches: [ "main" ]
    paths:
      - "**/package.json"
      - "**/package-lock.json"
      - "**/requirements.txt"

permissions:
  contents: write
  pull-requests: write
  security-events: read
  id-token: write
  packages: write

env:
  TZ: Asia/Seoul
  REPORT_DIR: .github/sec_report
  LOG_DIR: .github/sec_report/logs
  ARTIFACT_DIR: .github/sec_report/artifacts

jobs:

  ##########################################################################
  # Node.js audit
  ##########################################################################
  node-security:
    name: "Node.js Dependency Check"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project:
          - anthropic-cost-tracker/nodejs
          - mcp-hello-js
          - mcp-fs

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare dirs and helper script (no heredoc)
        id: prep_node
        shell: bash
        run: |
          set -Eeo pipefail

          mkdir -p "${REPORT_DIR}" "${LOG_DIR}" "${ARTIFACT_DIR}"

          # helpers.sh 생성 (printf 사용. CRLF/EOF 이슈 회피)
          HELPER_PATH="${REPORT_DIR}/helpers.sh"

          printf '%s\n' '#!/usr/bin/env bash'                           >  "$HELPER_PATH"
          printf '%s\n' 'set -Eeo pipefail'                              >> "$HELPER_PATH"
          printf '%s\n' ''                                              >> "$HELPER_PATH"
          printf '%s\n' '# fallback LOG_DIR if not exported'            >> "$HELPER_PATH"
          printf '%s\n' 'LOG_BASE="${LOG_DIR:-.github/sec_report/logs}"'>> "$HELPER_PATH"
          printf '%s\n' ''                                              >> "$HELPER_PATH"
          printf '%s\n' 'safe_run() {'                                  >> "$HELPER_PATH"
          printf '%s\n' '  local label="$1"; shift || true'             >> "$HELPER_PATH"
          printf '%s\n' '  local logfile="${LOG_BASE}/${label}.log"'    >> "$HELPER_PATH"
          printf '%s\n' '  echo "▶ [$label] $(date "+%Y-%m-%d %H:%M:%S%z") START" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '  if "$@" >> "$logfile" 2>&1 ; then'           >> "$HELPER_PATH"
          printf '%s\n' '    echo "✅ [$label] OK" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '    return 0'                                  >> "$HELPER_PATH"
          printf '%s\n' '  else'                                        >> "$HELPER_PATH"
          printf '%s\n' '    local rc=$?'                               >> "$HELPER_PATH"
          printf '%s\n' '    echo "❌ [$label] FAILED exit=${rc}" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '    return $rc'                                >> "$HELPER_PATH"
          printf '%s\n' '  fi'                                          >> "$HELPER_PATH"
          printf '%s\n' '}'                                             >> "$HELPER_PATH"
          printf '%s\n' ''                                              >> "$HELPER_PATH"
          printf '%s\n' 'apt_fix() {'                                   >> "$HELPER_PATH"
          printf '%s\n' '  local logfile="${LOG_BASE}/apt.fix.log"'     >> "$HELPER_PATH"
          printf '%s\n' '  echo "[fix] apt_fix start" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '  sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* || true' >> "$HELPER_PATH"
          printf '%s\n' '  sudo dpkg --configure -a || true'            >> "$HELPER_PATH"
          printf '%s\n' '  sudo apt-get update -y || sudo apt-get update -y || true' >> "$HELPER_PATH"
          printf '%s\n' '}'                                             >> "$HELPER_PATH"

          chmod +x "$HELPER_PATH"

          echo "Node scan target: ${{ matrix.project }}" | tee -a "${REPORT_DIR}/SUMMARY_node.txt"

      - name: Check project/package.json
        id: node_exists
        shell: bash
        run: |
          set -Eeo pipefail
          if [ -d "${{ matrix.project }}" ] && [ -f "${{ matrix.project }}/package.json" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js
        if: steps.node_exists.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install jq
        if: steps.node_exists.outputs.exists == 'true'
        shell: bash
        run: |
          set -Eeo pipefail
          source "${REPORT_DIR}/helpers.sh"
          apt_fix || true
          sudo apt-get install -y jq || true

      - name: npm install/ci
        if: steps.node_exists.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        shell: bash
        run: |
          set -Eeo pipefail
          npm ci || npm install

      - name: npm audit
        if: steps.node_exists.outputs.exists == 'true'
        id: node_audit
        working-directory: ${{ matrix.project }}
        shell: bash
        run: |
          set -Eeo pipefail

          echo "## NPM Audit for ${{ matrix.project }}" >> "$GITHUB_STEP_SUMMARY"

          # 항상 continue
          npm audit --json > audit.json || true
          npm audit >> "$GITHUB_STEP_SUMMARY" || echo "Vulnerabilities found" >> "$GITHUB_STEP_SUMMARY"

          # 심각도 카운트
          if command -v jq >/dev/null 2>&1 && [ -f audit.json ]; then
            HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
            CRIT_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
          else
            HIGH_COUNT=0
            CRIT_COUNT=0
          fi

          echo "High severity: $HIGH_COUNT"
          echo "Critical severity: $CRIT_COUNT"

          echo "HIGH_COUNT=${HIGH_COUNT}" >> "$GITHUB_OUTPUT"
          echo "CRIT_COUNT=${CRIT_COUNT}" >> "$GITHUB_OUTPUT"

      - name: Upload Node audit artifact
        if: steps.node_exists.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          # 슬래시(/)는 보기 불편해서 - 로 치환. matrix.project 은 문자열이라 join() 미사용
          name: npm-audit-${{ github.run_number }}-${{ matrix.project }} 
          path: ${{ matrix.project }}/audit.json
          if-no-files-found: warn
          retention-days: 30


  ##########################################################################
  # Python audit
  ##########################################################################
  python-security:
    name: "Python Dependency Check"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project:
          - anthropic-cost-tracker/python
          - mcp-hello-py
          - mcp-python-server
          - mcp-apache-server
          - .

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare dirs and helper script (no heredoc)
        id: prep_py
        shell: bash
        run: |
          set -Eeo pipefail

          mkdir -p "${REPORT_DIR}" "${LOG_DIR}" "${ARTIFACT_DIR}"

          HELPER_PATH="${REPORT_DIR}/helpers.sh"
          # 같은 helpers.sh 이름으로 덮어써도됨. 내용 동일.
          printf '%s\n' '#!/usr/bin/env bash'                           >  "$HELPER_PATH"
          printf '%s\n' 'set -Eeo pipefail'                              >> "$HELPER_PATH"
          printf '%s\n' ''                                              >> "$HELPER_PATH"
          printf '%s\n' 'LOG_BASE="${LOG_DIR:-.github/sec_report/logs}"'>> "$HELPER_PATH"
          printf '%s\n' ''                                              >> "$HELPER_PATH"
          printf '%s\n' 'safe_run() {'                                  >> "$HELPER_PATH"
          printf '%s\n' '  local label="$1"; shift || true'             >> "$HELPER_PATH"
          printf '%s\n' '  local logfile="${LOG_BASE}/${label}.log"'    >> "$HELPER_PATH"
          printf '%s\n' '  echo "▶ [$label] $(date "+%Y-%m-%d %H:%M:%S%z") START" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '  if "$@" >> "$logfile" 2>&1 ; then'           >> "$HELPER_PATH"
          printf '%s\n' '    echo "✅ [$label] OK" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '    return 0'                                  >> "$HELPER_PATH"
          printf '%s\n' '  else'                                        >> "$HELPER_PATH"
          printf '%s\n' '    local rc=$?'                               >> "$HELPER_PATH"
          printf '%s\n' '    echo "❌ [$label] FAILED exit=${rc}" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '    return $rc'                                >> "$HELPER_PATH"
          printf '%s\n' '  fi'                                          >> "$HELPER_PATH"
          printf '%s\n' '}'                                             >> "$HELPER_PATH"
          printf '%s\n' ''                                              >> "$HELPER_PATH"
          printf '%s\n' 'apt_fix() {'                                   >> "$HELPER_PATH"
          printf '%s\n' '  local logfile="${LOG_BASE}/apt.fix.log"'     >> "$HELPER_PATH"
          printf '%s\n' '  echo "[fix] apt_fix start" | tee -a "$logfile"' >> "$HELPER_PATH"
          printf '%s\n' '  sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* || true' >> "$HELPER_PATH"
          printf '%s\n' '  sudo dpkg --configure -a || true'            >> "$HELPER_PATH"
          printf '%s\n' '  sudo apt-get update -y || sudo apt-get update -y || true' >> "$HELPER_PATH"
          printf '%s\n' '}'                                             >> "$HELPER_PATH"

          chmod +x "$HELPER_PATH"

          echo "Python scan target: ${{ matrix.project }}" | tee -a "${REPORT_DIR}/SUMMARY_py.txt"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Check requirements.txt
        id: py_exists
        shell: bash
        run: |
          set -Eeo pipefail
          if [ -d "${{ matrix.project }}" ] && [ -f "${{ matrix.project }}/requirements.txt" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install security tools
        if: steps.py_exists.outputs.exists == 'true'
        shell: bash
        run: |
          set -Eeo pipefail
          python -m pip install --upgrade pip
          pip install pip-audit safety bandit || true

      - name: Ensure jq (for parsing)
        if: steps.py_exists.outputs.exists == 'true'
        shell: bash
        run: |
          set -Eeo pipefail
          source "${REPORT_DIR}/helpers.sh"
          apt_fix || true
          sudo apt-get install -y jq || true

      - name: pip-audit
        if: steps.py_exists.outputs.exists == 'true'
        id: py_audit
        shell: bash
        run: |
          set -Eeo pipefail

          echo "## Pip Audit for ${{ matrix.project }}" >> "$GITHUB_STEP_SUMMARY"

          pip-audit -r "${{ matrix.project }}/requirements.txt" --format json > "${{ matrix.project }}/pip-audit.json" || true
          pip-audit -r "${{ matrix.project }}/requirements.txt" >> "$GITHUB_STEP_SUMMARY" || echo "Vulnerabilities found" >> "$GITHUB_STEP_SUMMARY"

          if command -v jq >/dev/null 2>&1 && [ -f "${{ matrix.project }}/pip-audit.json" ]; then
            HIGH=$(jq '[.[] | .vulns[]? | select(.severity=="HIGH")] | length' "${{ matrix.project }}/pip-audit.json" 2>/dev/null || echo 0)
            CRIT=$(jq '[.[] | .vulns[]? | select(.severity=="CRITICAL")] | length' "${{ matrix.project }}/pip-audit.json" 2>/dev/null || echo 0)
          else
            HIGH=0
            CRIT=0
          fi

          echo "High severity vulns: $HIGH"
          echo "Critical severity vulns: $CRIT"

          echo "HIGH_COUNT=${HIGH}" >> "$GITHUB_OUTPUT"
          echo "CRIT_COUNT=${CRIT}" >> "$GITHUB_OUTPUT"

      - name: safety check
        if: steps.py_exists.outputs.exists == 'true'
        shell: bash
        run: |
          set -Eeo pipefail
          echo "## Safety Check for ${{ matrix.project }}" >> "$GITHUB_STEP_SUMMARY"
          safety check -r "${{ matrix.project }}/requirements.txt" --json > "${{ matrix.project }}/safety.json" || true
          safety check -r "${{ matrix.project }}/requirements.txt" >> "$GITHUB_STEP_SUMMARY" || echo "Vulnerabilities found" >> "$GITHUB_STEP_SUMMARY"

      - name: bandit static analysis
        if: steps.py_exists.outputs.exists == 'true'
        shell: bash
        run: |
          set -Eeo pipefail
          TARGET_DIR="${{ matrix.project }}"
          bandit -r "$TARGET_DIR" -f json -o "$TARGET_DIR/bandit.json" || true
          echo "## Bandit Security Scan for $TARGET_DIR" >> "$GITHUB_STEP_SUMMARY"
          bandit -r "$TARGET_DIR" || echo "Bandit found issues" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload Python audit artifact
        if: steps.py_exists.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-audit-${{ github.run_number }}-${{ matrix.project }}
          path: |
            ${{ matrix.project }}/pip-audit.json
            ${{ matrix.project }}/safety.json
            ${{ matrix.project }}/bandit.json
          if-no-files-found: warn
          retention-days: 30


  ##########################################################################
  # GitHub advisory gate on PR
  ##########################################################################
  dependency-review:
    name: "Dependency Review (PR gate)"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: on-failure


  ##########################################################################
  # Weekly scheduled run -> if any job failed, open issue
  ##########################################################################
  create-issue-on-weekly-failure:
    name: "Create Issue on Weekly Failure"
    runs-on: ubuntu-latest
    needs: [node-security, python-security]
    if: github.event_name == 'schedule' && failure()

    steps:
      - name: Open or reuse security issue
        uses: actions/github-script@v7
        with:
          script: |
            const existing = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,dependency-check',
              state: 'open'
            });

            if (existing.data.length === 0) {
              const bodyText = [
                "🚨 Weekly dependency check reported failures.",
                "",
                "일부 보안 점검 단계(npm audit / pip-audit / bandit / safety 등)가 실패했습니다.",
                "취약 의존성(high/critical) 또는 감사 단계 오류 가능성이 있습니다.",
                "",
                `Run details: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                "",
                "Artifacts (npm-audit-*, python-audit-*)를 확인하여",
                "취약한 패키지 및 문제 지점을 업데이트/조치해 주세요."
              ].join("\n");

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "🚨 Dependency Security Check Failure (Weekly Scan)",
                body: bodyText,
                labels: ["security", "dependency-check", "automated"]
              });
            }
