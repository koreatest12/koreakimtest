name: "üöÄ Ï¢ÖÌï© CI/CD ÌååÏù¥ÌîÑÎùºÏù∏ (Java+Python+DB+Docker+Security+SBOM+SmokeTest+ServerSetup+Upgrade)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:               # 1
        description: "Ïã§Ìñâ Î™®Îìú (full=Ï†ïÏãù / lite=ÏùºÎ∂ÄÏä§ÌÇµ)"
        type: choice
        required: true
        default: "full"
        options: [ "full", "lite" ]
      run_security:       # 2
        description: "Î≥¥Ïïà Ïä§Ï∫î/Ï∑®ÏïΩÏ†ê Ï†êÍ≤Ä ÏàòÌñâ Ïó¨Î∂Ä"
        type: boolean
        default: true
      run_sbom:           # 3
        description: "SBOM / ÎùºÏù¥ÏÑ†Ïä§ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïó¨Î∂Ä"
        type: boolean
        default: true
      run_smoketest:      # 4
        description: "ÎπåÎìúÎêú Docker Ïù¥ÎØ∏ÏßÄ Ïª®ÌÖåÏù¥ÎÑà Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏàòÌñâ Ïó¨Î∂Ä"
        type: boolean
        default: true
      java_version:       # 5
        description: "Java Î≤ÑÏ†Ñ (Ïòà: 17 ÎòêÎäî 21)"
        required: false
        default: "17"
      python_version:     # 6
        description: "Python Î≤ÑÏ†Ñ (Ïòà: 3.10 ÎòêÎäî 3.12)"
        required: false
        default: "3.10"
      parallel_level:     # 7
        description: "Î≥ëÎ†¨/Îß§Ìä∏Î¶≠Ïä§ Í∞ïÎèÑ (ÎπåÎìú Î∂ÄÌïò Ï°∞Ï†àÏö© Î©îÌÉÄÍ∞í)"
        required: false
        default: "standard"
      push_image:         # 8
        description: "push Ïù¥Î≤§Ìä∏Ïùº Îïå GHCRÏóê Docker Ïù¥ÎØ∏ÏßÄÎ•º Ïã§Ï†úÎ°ú Ìë∏ÏãúÌï†ÏßÄ Ïó¨Î∂Ä"
        type: boolean
        default: true
      notes:              # 9
        description: "Î©îÎ™®/Ï£ºÏÑù(Î°úÍ∑∏ÏóêÎßå ÎÇ®Ïùå)"
        required: false
        default: "run by CI/CD"
      force_continue:     # 10
        description: "ÏùºÎ∂Ä Îã®Í≥Ñ Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ (lint / scan / ÏóÖÍ∑∏Î†àÏù¥Îìú Îì±)"
        type: boolean
        default: true

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/echo_artifacts

  # DB env for integration test
  PSQL_HOST: localhost
  PSQL_PORT: "5432"
  PSQL_DB: testdb
  PSQL_USER: runner
  PSQL_PASS: password

  # Docker / image info
  DOCKER_HEALTH_PORT: "8080"
  DOCKER_HEALTH_PATH: "/health"
  IMAGE_REGISTRY: ghcr.io
  IMAGE_REPO: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  packages: write

jobs:

  #########################################################
  # JOB 0: ÌôòÍ≤Ω / Í≥µÌÜµ Î°úÍ∑∏ Ï§ÄÎπÑ
  #########################################################
  prepare-env:
    name: "üì¶ Prepare Workspace / Env Snapshot"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create log/artifact directories + dummy assets
        run: |
          set -Eeuo pipefail

          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}" tmp/temp-logs data/processed assets/images
          echo "ÏûÑÏãú Î°úÍ∑∏ Îç∞Ïù¥ÌÑ∞" > tmp/temp-logs/app.log
          touch assets/images/placeholder.png
          touch assets/images/logo.jpg

          echo "ÎπåÎìú ÏãúÏûë: $(date +'%Y-%m-%d %H:%M:%S%z')" > build-info.txt
          echo "mode=${{ github.event.inputs.mode || 'n/a' }}" >> build-info.txt
          echo "notes=${{ github.event.inputs.notes || 'n/a' }}" >> build-info.txt

          echo "===== ENV SNAPSHOT START ====="          >  env_snapshot.txt
          echo "TS=$(date +'%Y-%m-%d %H:%M:%S%z')"      >> env_snapshot.txt
          echo "uname -a:"                              >> env_snapshot.txt
          uname -a                                      >> env_snapshot.txt || true
          echo "df -h:"                                 >> env_snapshot.txt
          df -h                                         >> env_snapshot.txt || true
          echo "env | sort:"                            >> env_snapshot.txt
          env | sort                                    >> env_snapshot.txt || true
          echo "===== ENV SNAPSHOT END ====="           >> env_snapshot.txt

          echo "--- ÌååÏùº Íµ¨Ï°∞ (ls -R) ---" > tree.txt
          ls -R >> tree.txt || true
          echo "--------------------------" >> tree.txt

      - name: Upload initial snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: initial-snapshot
          path: |
            build-info.txt
            env_snapshot.txt
            tree.txt
            tmp/temp-logs/app.log
            assets/images/
            data/processed/

  #########################################################
  # JOB 1: ÏΩîÎìú Î≥¥Ïïà Ï†ïÏ†ÅÎ∂ÑÏÑù (CodeQL)
  #########################################################
  security-scan:
    name: "üõ° CodeQL Security Scan"
    runs-on: ubuntu-latest
    needs: prepare-env
    if: ${{ github.event.inputs.run_security != 'false' }}

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'python' ]

    permissions:
      contents: read
      actions: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

      # Ìï≠ÏÉÅ codeql_reports ÎîîÎ†âÌÜ†Î¶¨Î•º ÎßåÎì§Ïñ¥ÏÑú
      # ÏïÑÌã∞Ìå©Ìä∏ ÏóÖÎ°úÎìú Í≤ΩÍ≥†(Í≤ΩÎ°ú ÏóÜÏùå)Î•º ÎßâÎäîÎã§
      - name: Collect CodeQL reports (always create folder)
        if: always()
        run: |
          set -Eeuo pipefail
          mkdir -p codeql_reports

          echo "[Collect] Try to gather SARIF / logs for ${{ matrix.language }}"

          # CodeQL Í≤∞Í≥ºÎ¨º Í∏ÅÏñ¥Ïò§Í∏∞ (ÏûàÏñ¥ÎèÑ ÎêòÍ≥† ÏóÜÏñ¥ÎèÑ Îê®)
          cp -r ./codeql-results*/* codeql_reports/ 2>/dev/null || true
          cp -r ./codeql-results*   codeql_reports/ 2>/dev/null || true
          cp -r *.sarif             codeql_reports/ 2>/dev/null || true

          echo "[Collect] Listing codeql_reports:"
          ls -R codeql_reports || true

          # ÎπÑÏñ¥ÏûàÏúºÎ©¥ README.txtÎùºÎèÑ ÎÑ£Ïñ¥ÏÑú ÏóÖÎ°úÎìú Í∞ÄÎä•ÌïòÍ≤å
          if [ -z "$(ls -A codeql_reports)" ]; then
            echo "no CodeQL SARIF generated for ${{ matrix.language }}" > codeql_reports/README.txt
          fi

      - name: Upload CodeQL Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-${{ matrix.language }}
          path: codeql_reports
          if-no-files-found: ignore

  #########################################################
  # JOB 2: Build & Test (Java + Python + DB) + Coverage + Lint
  #
  # - matrix Ï†úÍ±∞ (dispatch ÏûÖÎ†•Í∞íÏùÑ envÎ°ú ÏÇ¨Ïö©)
  # - GitHub Dependency Graph Ï†úÏ∂úÏùÑ Ïñ∏Ïñ¥Î≥Ñ Í≥µÏãù Ïï°ÏÖòÏúºÎ°ú ÍµêÏ≤¥
  #########################################################
  build-and-test:
    name: "üõ† Build/Test w/ Postgres, Coverage, Lint"
    runs-on: ubuntu-latest
    needs: prepare-env

    # Ïó¨Í∏∞ jobÎßå Î≥ÑÎèÑ permissions ÏÉÅÌñ•:
    # dependency-submission Ïï°ÏÖòÏùÄ contents: write ÌïÑÏöî
    permissions:
      contents: write
      security-events: write
      packages: write

    env:
      JAVA_VERSION: ${{ github.event.inputs.java_version || '17' }}
      PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.10' }}
      FORCE_CONTINUE: ${{ github.event.inputs.force_continue || 'true' }}

      # DB env (global envÏóêÏÑú Î≥µÏÇ¨)
      PSQL_HOST: ${{ env.PSQL_HOST }}
      PSQL_PORT: ${{ env.PSQL_PORT }}
      PSQL_DB:   ${{ env.PSQL_DB }}
      PSQL_USER: ${{ env.PSQL_USER }}
      PSQL_PASS: ${{ env.PSQL_PASS }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U runner -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- DB Wait Guard ---
      - name: Wait for Postgres
        run: |
          echo "Waiting for Postgres to be ready..."
          for i in {1..30}; do
            pg_isready -h "${PSQL_HOST}" -p "${PSQL_PORT}" && break
            echo "Postgres not ready yet ($i)..."
            sleep 2
          done
          pg_isready -h "${PSQL_HOST}" -p "${PSQL_PORT}"

      # --- Java Setup ---
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      # Java Lint / Style (soft fail)
      - name: Java Lint / Style Check
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          echo "[Java lint placeholder] mvn spotless:check || mvn checkstyle:check || true"

      # Java Build + Test + Coverage
      - name: Maven Build/Test
        env:
          DB_HOST: ${{ env.PSQL_HOST }}
          DB_PORT: ${{ env.PSQL_PORT }}
          DB_NAME: ${{ env.PSQL_DB }}
          DB_USER: ${{ env.PSQL_USER }}
          DB_PASSWORD: ${{ env.PSQL_PASS }}
        run: |
          mvn -B -q clean verify --file pom.xml
          echo "Maven tests complete."
          ls -R target || true

      # ‚úÖ Java Dependency Graph Ï†úÏ∂ú (Maven Í≥µÏãù Ïï°ÏÖò)
      - name: Submit Maven dependency snapshot to GitHub
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        uses: advanced-security/maven-dependency-submission-action@v4
        with:
          directory: ${{ github.workspace }}

      # --- Python Setup ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov flake8 || true

      - name: Python Lint (flake8 soft fail)
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          if [ -f requirements.txt ]; then
            echo "Running flake8..."
            flake8 . || true
          else
            echo "No Python project detected, skipping lint."
          fi

      - name: Python Tests w/ Coverage
        run: |
          echo "Running pytest with coverage (soft if no tests)..."
          pytest --cov=. --cov-report=xml --cov-report=term || true
          ls -R || true

      # ‚úÖ Python/Í∏∞ÌÉÄ Dependency Graph Ï†úÏ∂ú (Component Detection)
      - name: Submit Python dependency snapshot to GitHub
        if: ${{ hashFiles('**/requirements.txt') != '' }}
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        uses: advanced-security/component-detection-dependency-submission-action@v0.1.0

      # Î¶¨Ìè¨Ìä∏/Ïª§Î≤ÑÎ¶¨ÏßÄ/ÌÖåÏä§Ìä∏ Î°úÍ∑∏ ÏàòÏßë
      - name: Collect build/test artifacts
        if: always()
        run: |
          mkdir -p collected_artifacts
          cp -r target/surefire-reports collected_artifacts/surefire-reports 2>/dev/null || true
          cp -r target/site/jacoco collected_artifacts/jacoco 2>/dev/null || true
          cp coverage.xml collected_artifacts/python-coverage.xml 2>/dev/null || true
          cp -r .pytest_cache collected_artifacts/pytest_cache 2>/dev/null || true
          ls -R collected_artifacts || true

      - name: Upload build/test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-and-test-artifacts
          path: collected_artifacts
          if-no-files-found: ignore

  #########################################################
  # JOB 3: ÏÑúÎ≤Ñ ÏÑ§Ïπò & ÏóÖÍ∑∏Î†àÏù¥Îìú / OS Ìå®Ïπò / ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
  #########################################################
  server-setup-upgrade:
    name: "üñ• Server Setup & Upgrade (nginx/redis/psql-client + OS Upgrade)"
    runs-on: ubuntu-latest
    needs: build-and-test

    env:
      FORCE_CONTINUE: ${{ github.event.inputs.force_continue || 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install core server packages (nginx, redis-server, postgresql-client)
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          set -Eeuo pipefail
          echo "[ServerSetup] apt-get update..."
          sudo apt-get update -y || true

          echo "[ServerSetup] install nginx, redis-server, postgresql-client, curl..."
          sudo apt-get install -y nginx redis-server postgresql-client curl || true

          echo "[ServerSetup] enable and check services (where applicable)..."
          sudo systemctl status nginx        || true
          sudo systemctl status redis-server || true

          echo "[ServerSetup] nginx version:"  > server_setup_report.txt
          nginx -v                           >> server_setup_report.txt 2>&1 || true
          echo "[ServerSetup] redis-cli info memory:" >> server_setup_report.txt
          redis-cli info memory              >> server_setup_report.txt 2>&1 || true
          echo "[ServerSetup] psql version:" >> server_setup_report.txt
          psql --version                     >> server_setup_report.txt 2>&1 || true

      - name: Configure unattended-upgrades (auto security updates)
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          set -Eeuo pipefail
          echo "[Upgrade] Installing unattended-upgrades / update-notifier-common..."
          sudo apt-get install -y unattended-upgrades update-notifier-common || true

          echo "[Upgrade] Enabling unattended-upgrades..."
          sudo dpkg-reconfigure -f noninteractive unattended-upgrades || true

          echo "" >> server_setup_report.txt
          echo "[Upgrade] unattended-upgrades enabled at $(date +'%Y-%m-%d %H:%M:%S%z')" >> server_setup_report.txt

      - name: System upgrade (dist-upgrade + cleanup)
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          set -Eeuo pipefail
          echo "[Upgrade] apt-get upgrade -y && dist-upgrade -y"
          sudo apt-get update -y || true
          sudo apt-get upgrade -y || true
          sudo apt-get dist-upgrade -y || true
          sudo apt-get autoremove -y || true
          echo "[Upgrade] Completed system upgrade at $(date +'%Y-%m-%d %H:%M:%S%z')" >> server_setup_report.txt

      - name: Capture service status and environment
        if: always()
        run: |
          echo "===== systemctl is-active nginx ====="  > server_status_snapshot.txt
          systemctl is-active nginx                  >> server_status_snapshot.txt 2>&1 || true

          echo "===== systemctl is-active redis =====" >> server_status_snapshot.txt
          systemctl is-active redis-server           >> server_status_snapshot.txt 2>&1 || true

          echo "===== ps aux | head -n 20 ====="     >> server_status_snapshot.txt
          ps aux | head -n 20                        >> server_status_snapshot.txt || true

          echo "===== df -h ====="                   >> server_status_snapshot.txt
          df -h                                      >> server_status_snapshot.txt || true

          echo "===== uname -a ====="                >> server_status_snapshot.txt
          uname -a                                   >> server_status_snapshot.txt || true

          echo "===== lsb_release -a ====="          >> server_status_snapshot.txt
          lsb_release -a                             >> server_status_snapshot.txt 2>&1 || true

      - name: Upload server setup & upgrade artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-setup-upgrade
          path: |
            server_setup_report.txt
            server_status_snapshot.txt
          if-no-files-found: ignore

  #########################################################
  # JOB 4: SBOM / ÎùºÏù¥ÏÑ†Ïä§ Î≥¥Í≥†ÏÑú (CycloneDX Îì±)
  #########################################################
  sbom-and-licenses:
    name: "üìú SBOM / License Report"
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event.inputs.run_sbom != 'false' }}

    env:
      JAVA_VERSION: ${{ github.event.inputs.java_version || '17' }}
      FORCE_CONTINUE: ${{ github.event.inputs.force_continue || 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java for SBOM
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Generate CycloneDX SBOM (Java)
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          mvn -B org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom || true
          ls -R target || true

      - name: Generate Python license list / audit
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          python3 -m pip install --upgrade pip pip-licenses pip-audit || true
          pip-licenses --format=json > python-licenses.json || true
          pip-audit -f json > python-audit.json || true
          ls -l python-licenses.json python-audit.json || true

      - name: Collect SBOM & license artifacts
        if: always()
        run: |
          mkdir -p sbom_artifacts
          cp target/bom.json sbom_artifacts/java-bom.json 2>/dev/null || true
          cp python-licenses.json sbom_artifacts/python-licenses.json 2>/dev/null || true
          cp python-audit.json sbom_artifacts/python-audit.json 2>/dev/null || true
          ls -R sbom_artifacts || true

      - name: Upload SBOM & Licenses
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-and-licenses
          path: sbom_artifacts
          if-no-files-found: ignore

  #########################################################
  # JOB 5: Docker Build / Push / Security Scan / SmokeTest
  #########################################################
  docker-build-push:
    name: "üê≥ Docker Build & Push & Scan & SmokeTest"
    runs-on: ubuntu-latest
    needs: server-setup-upgrade

    env:
      FORCE_CONTINUE: ${{ github.event.inputs.force_continue || 'true' }}
      DOCKER_HEALTH_PORT: ${{ env.DOCKER_HEALTH_PORT }}
      DOCKER_HEALTH_PATH: ${{ env.DOCKER_HEALTH_PATH }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest

      - name: Build & (conditionally) Push Docker Image
        id: buildpush
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.java
          push: ${{ github.event_name == 'push' && github.event.inputs.push_image != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Pick primary image tag
        id: picktag
        run: |
          echo "${{ steps.meta.outputs.tags }}" | head -n1 > primary_tag.txt
          echo "PRIMARY_TAG=$(head -n1 primary_tag.txt)" >> $GITHUB_OUTPUT
          cat primary_tag.txt

      - name: Docker Smoke Test (run container + healthcheck)
        if: ${{ github.event.inputs.run_smoketest != 'false' }}
        run: |
          set -Eeuo pipefail
          IMG="${{ steps.picktag.outputs.PRIMARY_TAG }}"
          echo "Smoke test with image: $IMG"
          docker run -d --name app-test -p 8080:8080 "$IMG"
          sleep 5
          curl -f "http://localhost:${DOCKER_HEALTH_PORT}${DOCKER_HEALTH_PATH}" || (
            echo "Health check failed, dumping logs..."
            docker logs app-test || true
            exit 1
          )
          echo "Container health OK"
          docker logs app-test || true
          docker rm -f app-test || true

      - name: Install Trivy (image vulnerability scan)
        if: ${{ github.event.inputs.run_security != 'false' }}
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy
          echo "Trivy installed."

      - name: Run Trivy Scan on Image
        if: ${{ github.event.inputs.run_security != 'false' }}
        continue-on-error: ${{ env.FORCE_CONTINUE == 'true' }}
        run: |
          IMG="${{ steps.picktag.outputs.PRIMARY_TAG }}"
          echo "Scanning image $IMG"
          trivy image --no-progress --format table --output trivy-report.txt "$IMG" || true
          cat trivy-report.txt || true

      - name: Upload Docker Scan & SmokeTest logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-scan-and-smoketest
          path: |
            trivy-report.txt
            primary_tag.txt
          if-no-files-found: ignore
