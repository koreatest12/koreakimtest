name: "🚀 종합 CI/CD 파이프라인 (Java + Python + DB + Docker + Security)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  #########################################################
  # JOB 1: 보안 검사 (CodeQL)
  #########################################################
  security-scan:
    name: "🛡️ Security Scan (CodeQL)"
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild (CodeCodeQL)
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  #########################################################
  # JOB 2: 빌드, 테스트 및 파일 생성
  #########################################################
  build-and-test:
    name: "🛠️ Build, Test, Cache & File Creation"
    runs-on: ubuntu-latest
    needs: security-scan

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "📄 임시 파일, 디렉토리 및 더미 이미지 생성"
        run: |
          echo "임시 폴더 및 파일을 생성합니다..."
          mkdir -p tmp/temp-logs
          echo "임시 로그 데이터" > tmp/temp-logs/app.log
          
          echo "데이터 및 에셋 디렉토리를 생성합니다..."
          mkdir -p data/processed
          mkdir -p assets/images
          
          echo "더미 이미지 파일(자리표시자)을 생성합니다..."
          touch assets/images/placeholder.png
          touch assets/images/logo.jpg
          
          echo "루트 디렉토리에 추가 파일을 생성합니다..."
          echo "이것은 빌드 정보 파일입니다." > build-info.txt
          
          echo "--- 생성된 파일 및 디렉토리 목록 (ls -R) ---"
          ls -R
          echo "-------------------------------------------"

      # -----------------
      # Java (Maven) 설정
      # -----------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: runner
          DB_PASSWORD: password
        run: |
          mvn -B package --file pom.xml
          mvn test

      - name: Submit Java Dependency Graph
        # 🚨 [오류 수정] 'actions/' -> 'github/'로 변경
        uses: github/dependency-submission-action@v1 
        with:
          build-root-directory: ${{ github.workspace }}
          manifest-path: ${{ github.workspace }}/target/dependency-submission.json

      # -----------------
      # Python 설정
      # -----------------
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Python Scripts (e.g., Data Pipeline)
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: runner
          DB_PASSWORD: password
        run: |
          echo "파이썬 스크립트 실행..."
          # python ./your_python_script.py
          echo "파이썬 스크립트 실행 완료 (시뮬레이션)"

      - name: Submit Python Dependency Graph
        # 🚨 [오류 수정] 'actions/' -> 'github/'로 변경
        uses: github/dependency-submission-action@v1
        with:
          build-root-directory: ${{ github.workspace }}
          manifest-path: ${{ github.workspace }}/requirements.txt

  #########################################################
  # JOB 3: Docker 이미지 빌드 및 푸시
  #########################################################
  build-and-push-docker:
    name: "🐳 Build and Push Docker Image"
    runs-on: ubuntu-latest
    needs: build-and-test

    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.java
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
