name: Build and Deploy to IKS (rev8)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      run_iks_upgrade:
        description: "IKS 클러스터 마스터/워커 노드를 업그레이드합니다. (주의: 시간이 오래 걸릴 수 있음)"
        type: boolean
        default: false

# 환경 변수 정의
env:
  TZ: Asia/Seoul
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_REGION: us-south 
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id
  DEPLOYMENT_NAME: iks-test
  PORT: 5001
  
  # 최종 결과 출력을 위한 변수 초기화
  SERVICE_URL_FINAL: 'N/A'

jobs:
  # --- [ JOB 1: IKS 클러스터 업그레이드 ] ---
  iks-upgrade:
    name: "① IKS Cluster Upgrade (Optional)"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_iks_upgrade == 'true'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check Required Secrets (Auth Check)
      id: check_auth
      shell: bash
      run: |
        if [ -z "${{ secrets.IBM_CLOUD_API_KEY }}" ]; then
          echo "⚠️ Warning: IBM_CLOUD_API_KEY secret is missing. Skipping upgrade." >&2
          echo "AUTH_OK=false" >> $GITHUB_ENV
          exit 0
        fi
        echo "AUTH_OK=true" >> $GITHUB_ENV
        echo "IBM_CLOUD_API_KEY=${{ secrets.IBM_CLOUD_API_KEY }}" >> $GITHUB_ENV
        
    - name: Install IBM Cloud CLI
      if: env.AUTH_OK == 'true'
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        
    - name: Authenticate with IBM Cloud CLI (Retries)
      if: env.AUTH_OK == 'true'
      id: ibm_auth
      shell: bash
      run: |
        MAX_RETRIES=3
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i/$MAX_RETRIES: Logging into IBM Cloud..."
          if ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default; then
            echo "✅ IBM Cloud authentication successful."
            exit 0
          else
            echo "❌ Authentication failed on attempt $i. Retrying in 5 seconds..." >&2
            sleep 5
          fi
        done
        echo "--- Final Authentication Failure after $MAX_RETRIES retries. ---" >&2
        exit 1
      continue-on-error: true
      
    - name: Upgrade IKS Cluster Master
      if: steps.ibm_auth.outcome == 'success'
      run: |
        echo "Starting IKS Master Upgrade for cluster: ${IKS_CLUSTER}..."
        ibmcloud ks cluster master update --cluster $IKS_CLUSTER
        echo "Master upgrade initiated. Waiting for status to stabilize..."
      continue-on-error: true

    - name: Upgrade IKS Worker Nodes
      if: steps.ibm_auth.outcome == 'success'
      run: |
        echo "Starting IKS Worker Node Upgrade for cluster: ${IKS_CLUSTER}..."
        ibmcloud ks worker update --cluster $IKS_CLUSTER --all
        echo "Worker node upgrade initiated."
      continue-on-error: true
      
  # --- [ JOB 2: 기존 Build & Deploy Job ] ---
  setup-build-publish-deploy:
    name: "② Build, Publish, and Deploy"
    runs-on: ubuntu-latest
    needs: [iks-upgrade]
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check Required Secrets (Continue on Missing)
      id: check_secrets
      shell: bash
      run: |
        echo "--- Checking Required Secrets ---"
        
        if [ -z "${{ secrets.IBM_CLOUD_API_KEY }}" ]; then
          echo "⚠️ Warning: IBM_CLOUD_API_KEY secret is missing. Cloud authentication will fail." >&2
          echo "AUTH_OK=false" >> $GITHUB_ENV
        else
          echo "AUTH_OK=true" >> $GITHUB_ENV
        fi

        if [ -z "${{ secrets.ICR_NAMESPACE }}" ]; then
          echo "⚠️ Warning: ICR_NAMESPACE secret is missing. Image build/push will fail (invalid tag)." >&2
          echo "ICR_NAMESPACE_OK=false" >> $GITHUB_ENV
        else
          echo "ICR_NAMESPACE_OK=true" >> $GITHUB_ENV
        fi
        
        echo "ICR_NAMESPACE=${{ secrets.ICR_NAMESPACE }}" >> $GITHUB_ENV
        echo "IBM_CLOUD_API_KEY=${{ secrets.IBM_CLOUD_API_KEY }}" >> $GITHUB_ENV
      
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry
        
    - name: Authenticate with IBM Cloud CLI (Retries)
      if: env.AUTH_OK == 'true'
      id: ibm_auth_deploy
      shell: bash
      run: |
        MAX_RETRIES=3
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i/$MAX_RETRIES: Logging into IBM Cloud..."
          if ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default; then
            echo "✅ IBM Cloud authentication successful."
            echo "AUTH_SUCCESS=true" >> $GITHUB_ENV
            exit 0
          else
            echo "❌ Authentication failed on attempt $i. Retrying in 5 seconds..." >&2
            sleep 5
          fi
        done
        
        echo "AUTH_SUCCESS=false" >> $GITHUB_ENV
        echo "--- Final Authentication Failure after $MAX_RETRIES retries. ---" >&2
        exit 1
      continue-on-error: true

    - name: Build with Docker
      if: env.ICR_NAMESPACE_OK == 'true'
      id: docker_build
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
        
        if [ $? -eq 0 ]; then
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
        fi
      continue-on-error: true
          
    - name: Docker Registry Login and Push
      if: env.AUTH_SUCCESS == 'true' && env.BUILD_SUCCESS == 'true'
      run: |
        echo "Attempting container registry login..."
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login
        echo "Pushing image to ICR..."
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
      continue-on-error: true
        
    # --- [ IKS Config 재시도 및 배포 로직 (수정 및 추가) ] ---
    - name: IKS Cluster Config (Retries)
      if: env.AUTH_SUCCESS == 'true'
      id: iks_config
      shell: bash
      run: |
        MAX_RETRIES=3
        CONFIG_SUCCESS=false

        for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES: Configuring IKS cluster..."
            ibmcloud ks cluster config --cluster $IKS_CLUSTER
            # kubectl이 컨텍스트를 성공적으로 인식하는지 테스트
            if kubectl config current-context 2>/dev/null | grep -q "$IKS_CLUSTER"; then
                echo "✅ IKS cluster config successful."
                CONFIG_SUCCESS=true
                break
            else
                echo "❌ IKS config failed (or context not found). Retrying in 5 seconds..." >&2
                sleep 5
            fi
        done
        
        if [ "$CONFIG_SUCCESS" = "true" ]; then
            echo "IKS_CONFIG_OK=true" >> $GITHUB_ENV
        else
            echo "IKS_CONFIG_OK=false" >> $GITHUB_ENV
            echo "--- Final IKS Config Failure after $MAX_RETRIES retries. ---" >&2
            exit 1 # 스텝 실패로 플래그 설정
        fi
      continue-on-error: true
      
    - name: Deploy to IKS
      if: env.AUTH_SUCCESS == 'true' && env.BUILD_SUCCESS == 'true' && env.IKS_CONFIG_OK == 'true'
      run: |
        echo "Attempting IKS Deployment..."
        
        IMAGE_TAG="$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA"
        
        # Deployment 생성/업데이트
        kubectl create deployment $DEPLOYMENT_NAME --image=$IMAGE_TAG --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME

        # Service LoadBalancer 생성/업데이트
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        
        kubectl get services -o wide
      continue-on-error: true

    - name: Get Service Public Hostname and Healthcheck
      id: get_host_health
      # 👈 인증과 IKS 설정이 성공했을 때만 호스트명 확인 시도 (kubectl 명령어의 성공을 보장하기 위함)
      if: always() && env.AUTH_SUCCESS == 'true' && env.IKS_CONFIG_OK == 'true'
      shell: bash
      run: |
        SERVICE_HOST=""
        MAX_TRIES=10
        
        for i in $(seq 1 $MAX_TRIES); do
          echo "Attempt $i/$MAX_TRIES: Getting public service IP..."
          SERVICE_HOST=$(kubectl get services $DEPLOYMENT_NAME -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" 2>/dev/null)
          
          if [ -z "$SERVICE_HOST" ]; then
             SERVICE_HOST=$(kubectl get services $DEPLOYMENT_NAME -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
          fi
          
          if [ -n "$SERVICE_HOST" ] && [ "$SERVICE_HOST" != "<pending>" ] && [ "$SERVICE_HOST" != "0.0.0.0" ]; then
            echo "✅ Public Service Hostname/IP found: $SERVICE_HOST"
            break
          fi
          
          echo "Service IP still pending or not assigned. Waiting 10 seconds..."
          sleep 10
          SERVICE_HOST=""
        done

        if [ -z "$SERVICE_HOST" ]; then
          echo "❌ Failed to get public service IP after $MAX_TRIES attempts. Skipping healthcheck."
          echo "SERVICE_URL_FINAL=(Not Available)" >> $GITHUB_ENV
          exit 0
        fi

        echo "--- Running Healthcheck ---"
        CURL_URL="http://$SERVICE_HOST:$PORT"
        echo "Checking $CURL_URL..."
        
        for i in 1 2 3; do
          if curl -fsS "$CURL_URL" > /dev/null; then
            echo "✅ Healthcheck successful (try $i)."
            echo "SERVICE_URL_FINAL=$CURL_URL" >> $GITHUB_ENV
            exit 0
          else
            echo "❌ Healthcheck failed (try $i). Waiting 5 seconds..." >&2
            sleep 5
          fi
        done
        
        echo "--- Healthcheck failed after retries. ---" >&2
        echo "SERVICE_URL_FINAL=$CURL_URL (Check Failed)" >> $GITHUB_ENV
        exit 0
      continue-on-error: true
      
    - name: Final Deployment Status
      run: |
        # 이전 스텝에서 설정된 SERVICE_URL_FINAL 값을 사용합니다.
        FINAL_URL="${{ env.SERVICE_URL_FINAL }}"
        
        echo "======================================================"
        echo "🎉 W O R K F L O W   C O M P L E T E D (SafeContinue)"
        echo "======================================================"
        echo "Deployment Status: All steps attempted."
        echo "Deployment Name: ${DEPLOYMENT_NAME}"
        echo "IKS Cluster: ${IKS_CLUSTER}"
        echo "--- Service Endpoint ---"
        echo "**FINAL SERVICE URL: ${FINAL_URL}**"
        echo "======================================================"
      if: ${{ github.event.inputs.force_success_msg == 'true' || github.event.inputs.force_success_msg == '' }}
