name: Build and Deploy to IKS (rev4)

on:
  push:
    branches: [ "main" ]

# 환경 변수 정의
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_REGION: us-south 
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id
  DEPLOYMENT_NAME: iks-test
  PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    # ---

    # ⚠️ [수정 반영] 시크릿이 없더라도 실패하지 않고 경고 후 계속 진행
    - name: Check Required Secrets (Continue on Missing)
      id: check_secrets
      shell: bash
      run: |
        echo "--- Checking Required Secrets ---"
        
        # 1. API Key 체크: 인증의 핵심. 없으면 플래그 설정
        if [ -z "${{ secrets.IBM_CLOUD_API_KEY }}" ]; then
          echo "⚠️ Warning: IBM_CLOUD_API_KEY secret is missing. Cloud authentication will fail." >&2
          echo "AUTH_OK=false" >> $GITHUB_ENV
        else
          echo "AUTH_OK=true" >> $GITHUB_ENV
        fi

        # 2. ICR Namespace 체크: 태그의 핵심. 없으면 태그/푸시 실패함
        if [ -z "${{ secrets.ICR_NAMESPACE }}" ]; then
          echo "⚠️ Warning: ICR_NAMESPACE secret is missing. Image build/push will fail (invalid tag)." >&2
          echo "ICR_NAMESPACE_OK=false" >> $GITHUB_ENV
        else
          echo "ICR_NAMESPACE_OK=true" >> $GITHUB_ENV
        fi
        
        # 3. 필수 시크릿을 환경 변수로 설정 (값이 비어있더라도 설정은 진행)
        echo "ICR_NAMESPACE=${{ secrets.ICR_NAMESPACE }}" >> $GITHUB_ENV
        echo "IBM_CLOUD_API_KEY=${{ secrets.IBM_CLOUD_API_KEY }}" >> $GITHUB_ENV
        
        echo "Secret check complete. Proceeding regardless of status."
      
    # ---

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry
        
    # ---

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      if: env.AUTH_OK == 'true' # 👈 AUTH_OK=true일 때만 시도
      id: ibm_auth
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        # 인증 성공 여부를 플래그에 저장하여 다음 스텝에서 사용
        if [ $? -eq 0 ]; then
          echo "AUTH_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "AUTH_SUCCESS=false" >> $GITHUB_ENV
        fi
      continue-on-error: true 
        
    # ---

    # Build the Docker image
    - name: Build with Docker
      if: env.ICR_NAMESPACE_OK == 'true' # 👈 태그 생성이 가능할 때만 빌드 시도
      id: docker_build
      run: |
        # 올바른 태그 생성: $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
        # 빌드 성공 여부를 플래그에 저장
        if [ $? -eq 0 ]; then
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
        fi
      continue-on-error: true
          
    # ---

    # Docker Registry Login and Push
    - name: Push the image to ICR
      if: env.AUTH_SUCCESS == 'true' && env.BUILD_SUCCESS == 'true' # 👈 인증과 빌드가 모두 성공했을 때만 푸시 시도
      run: |
        echo "Attempting container registry login..."
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login
        echo "Pushing image to ICR..."
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
      continue-on-error: true
        
    # ---

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      if: env.AUTH_SUCCESS == 'true' && env.BUILD_SUCCESS == 'true' # 👈 인증과 빌드가 모두 성공했을 때만 배포 시도
      run: |
        echo "Attempting IKS Deployment..."
        # IKS 클러스터 설정을 가져옵니다.
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        
        IMAGE_TAG="$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA"
        
        # Deployment 생성/업데이트
        kubectl create deployment $DEPLOYMENT_NAME --image=$IMAGE_TAG --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME

        # Service LoadBalancer 생성/업데이트
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        
        kubectl get services -o wide
      continue-on-error: true
