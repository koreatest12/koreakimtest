name: Build and Deploy to IKS (rev2)

on:
  push:
    branches: [ "main" ]

# 환경 변수 정의 (시크릿 값은 제거하고, 스텝에서 직접 주입하도록 변경)
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_REGION: us-south # 3. 이 값을 사용자 환경에 맞게 변경하세요.
  REGISTRY_HOSTNAME: us.icr.io # 3. 이 값을 사용자 환경에 맞게 변경하세요.
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id # 3. 이 값을 사용자 환경에 맞게 변경하세요.
  DEPLOYMENT_NAME: iks-test
  PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    # ---
      
    # ⚠️ [필수] 시크릿 존재 여부 확인 및 경고
    - name: Check Required Secrets
      shell: bash
      run: |
        if [ -z "${{ secrets.ICR_NAMESPACE }}" ]; then
          echo "❌ Error: ICR_NAMESPACE secret is missing." >&2
          exit 1
        fi
        if [ -z "${{ secrets.IBM_CLOUD_API_KEY }}" ]; then
          echo "❌ Error: IBM_CLOUD_API_KEY secret is missing. Authentication will fail." >&2
          exit 1
        fi
        # 2. 필수 시크릿을 환경 변수로 설정
        echo "ICR_NAMESPACE=${{ secrets.ICR_NAMESPACE }}" >> $GITHUB_ENV
        echo "IBM_CLOUD_API_KEY=${{ secrets.IBM_CLOUD_API_KEY }}" >> $GITHUB_ENV
      
    # ---

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry
        
    # ---

    # Authenticate with IBM Cloud CLI
    # 🔑 IBM_CLOUD_API_KEY 환경 변수를 스텝에 직접 주입하여 인증 실패 위험 최소화
    - name: Authenticate with IBM Cloud CLI
      run: |
        # $IBM_CLOUD_API_KEY는 이전 스텝에서 $GITHUB_ENV로 주입됨
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login
        
    # ---

    # Build the Docker image
    - name: Build with Docker
      run: |
        # $ICR_NAMESPACE도 $GITHUB_ENV에서 주입됨
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
          
    # ---

    # Push the image to IBM Container Registry
    - name: Push the image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
        
    # ---

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      run: |
        # IKS 클러스터 설정을 가져옵니다.
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        
        IMAGE_TAG="$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA"
        
        # 배포 (Deployment) 생성 또는 업데이트
        kubectl create deployment $DEPLOYMENT_NAME --image=$IMAGE_TAG --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME

        # 서비스 (Service LoadBalancer) 생성 또는 업데이트
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        
        kubectl get services -o wide
