# .github/workflows/ci-cd-pipeline.yml

name: 🐳 Java & Python CI/CD (Build, Test, Containerize)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ==================================================
  # ☕ 1. Java: 빌드, 테스트, 컨테이너 생성
  # ==================================================
  java-build-test-and-containerize:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 1. 코드 체크아웃
        uses: actions/checkout@v4

      - name: 1-1. (디버깅) Java 작업 파일 목록 확인
        run: |
          echo "--- Java Job: 현재 작업 디렉토리: $(pwd) ---"
          echo "--- ‼️ 중요: 여기서 Java용 Dockerfile의 실제 경로와 파일명을 확인하세요 ‼️ ---"
          ls -R
          echo "--------------------------------"

      - name: 2. JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: 3. Maven 종속성 캐시
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 4. Java 빌드 (JAR 파일 생성)
        run: mvn clean package

      - name: 5. Java 테스트 실행 (DB 연결)
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
          SPRING_DATASOURCE_USERNAME: db_user
          SPRING_DATASOURCE_PASSWORD: db_password

      - name: 6. Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 7. Docker 이미지 메타데이터 추출
        id: meta-java
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/java-app
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: 8. GitHub Container Registry(GHCR) 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 9. Docker 빌드 및 푸시 (Java)
        uses: docker/build-push-action@v5
        with:
          context: .
          # ‼️ [1번 수정 필수 지점] ‼️
          # '1-1. (디버깅)' 로그에서 확인한 실제 Java Dockerfile 경로로 수정하세요.
          # 예: file: ./Dockerfile (만약 파일명이 그냥 Dockerfile 이라면)
          # 예: file: ./backend/Dockerfile (만약 backend 폴더 안에 있다면)
          file: ./Dockerfile.java 
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-java.outputs.tags }}
          labels: ${{ steps.meta-java.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==================================================
  # 🐍 2. Python: 테스트, 컨테이너 생성
  # ==================================================
  python-test-and-containerize:
    runs-on: ubuntu-latest
    needs: java-build-test-and-containerize

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 1. 코드 체크아웃
        uses: actions/checkout@v4

      - name: 1-1. (디버깅) Python 작업 파일 목록 확인
        run: |
          echo "--- Python Job: 현재 작업 디렉토리: $(pwd) ---"
          echo "--- ‼️ 중요: 여기서 Python 스크립트와 Dockerfile의 실제 경로를 확인하세요 ‼️ ---"
          ls -R
          echo "--------------------------------"

      - name: 2. Python 3.10 설정 (pip + 캐시)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          # ‼️ [2번 수정 필수 지점] ‼️
          # requirements.txt 파일의 실제 경로로 수정하세요.
          # 예: cache-dependency-path: '**/requirements.txt' (루트에 있을 경우)
          # 예: cache-dependency-path: '**/python-app/requirements.txt' (폴더 안에 있을 경우)
          cache-dependency-path: '**/requirements.txt'

      - name: 3. Python 종속성 설치 (pip)
        run: |
          python -m pip install --upgrade pip
          # ‼️ [참고] requirements.txt 파일이 루트에 없다면 이 경로도 수정해야 합니다.
          # 예: pip install -r python-app/requirements.txt
          pip install -r requirements.txt

      - name: 4. Python 스크립트/테스트 실행 (DB 작업)
        # ‼️ [3번 수정 필수 지점] ‼️
        # '1-1. (디버깅)' 로그에서 확인한 실제 Python 스크립트 경로로 수정하세요.
        # 예: python main.py
        # 예: python app/run.py
        run: python src/my_script.py 
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: db_user
          DB_PASSWORD: db_password

      - name: 6. Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 7. Docker 이미지 메타데이터 추출
        id: meta-python
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/python-app
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: 8. GitHub Container Registry(GHCR) 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 9. Docker 빌드 및 푸시 (Python)
        uses: docker/build-push-action@v5
        with:
          context: .
          # ‼️ [4번 수정 필수 지점] ‼️
          # '1-1. (디버깅)' 로그에서 확인한 실제 Python Dockerfile 경로로 수정하세요.
          # 예: file: ./Dockerfile (만약 파일명이 그냥 Dockerfile 이라면)
          # 예: file: ./frontend/Dockerfile (만약 frontend 폴더 안에 있다면)
          file: ./Dockerfile.python 
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-python.outputs.tags }}
          labels: ${{ steps.meta-python.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
