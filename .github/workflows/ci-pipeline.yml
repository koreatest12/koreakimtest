# .github/workflows/ci-pipeline.yml

name: ☕ Java & 🐍 Python & 🐘 DB Workflow

on:
  push:
    branches: [ main ]
  workflow_dispatch: # 수동 실행 기능

jobs:
  # ========================================
  # ☕ 1. Java 빌드 및 테스트 작업
  # ========================================
  java-build-and-test:
    runs-on: ubuntu-latest

    # ----------------------------------------
    # 🐘 데이터베이스 생성 (서비스 컨테이너)
    # ----------------------------------------
    # 'services' 블록은 작업이 실행되는 동안 임시 DB 컨테이너를 생성합니다.
    services:
      postgres:
        image: postgres:14 # PostgreSQL 14 버전 이미지 사용
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432 # 호스트의 5432 포트를 컨테이너의 5432 포트와 매핑
        # 컨테이너가 준비될 때까지 기다리는 헬스 체크 옵션
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 1. 코드 체크아웃
        uses: actions/checkout@v4

      - name: 2. JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: 3. Java 종속성 캐시 (Maven)
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 4. Java 종속성 설치 및 빌드 (Maven)
        run: mvn clean install
        # 'mvn install'은 pom.xml을 읽어 필요한 라이브러리(종속성)를 다운로드하고 코드를 빌드합니다.

      - name: 5. Java 테스트 실행 (DB 연결)
        run: mvn test
        env:
          # 서비스 DB에 연결하기 위한 환경 변수 설정
          # (애플리케이션의 application.properties/yml 등에서 이 변수들을 사용해야 함)
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
          SPRING_DATASOURCE_USERNAME: db_user
          SPRING_DATASOURCE_PASSWORD: db_password

  # ========================================
  # 🐍 2. Python 스크립트 실행 작업
  # ========================================
  python-script:
    runs-on: ubuntu-latest
    needs: java-build-and-test # Java 작업이 성공해야 실행 (선택 사항)

    # ----------------------------------------
    # 🐘 데이터베이스 생성 (서비스 컨테이너)
    # ----------------------------------------
    # Python 작업도 별도의 DB 서비스 컨테이너를 사용합니다.
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 1. 코드 체크아웃
        uses: actions/checkout@v4

      - name: 2. Python 3.10 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # pip 종속성 캐시

      - name: 3. Python 종속성 설치 (pip)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 'requirements.txt' 파일에 명시된 종속성을 설치합니다.

      - name: 4. Python 스크립트 실행 (DB 마이그레이션 또는 데이터 작업)
        run: python src/my_script.py
        env:
          # Python 스크립트가 DB에 연결할 수 있도록 환경 변수 설정
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: db_user
          DB_PASSWORD: db_password
