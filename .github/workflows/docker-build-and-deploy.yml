name: "Docker Build & Deploy (Ignore SSH Key Error)"

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - ".github/workflows/**" # 경로 수정
      - "package.json"
      - "package-lock.json"
      - "**/*.ts"
      - "**/*.js"
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Custom tag for the Docker image (optional)"
        required: false
        default: ""
      deploy:
        description: "Trigger deployment to the server"
        required: true
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ########################################################
  # 1. 빌드 및 푸시 잡
  ########################################################
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ########################################################
  # 2. 배포 잡 (오류 무시 로직 적용)
  ########################################################
  deploy:
    name: Deploy to Server (Ignore Errors)
    needs: build-and-push
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy == true)
    runs-on: ubuntu-22.04

    steps:
      # 1. SSH 키 등록 시도 (실패해도 성공으로 처리)
      - name: Add SSH key to ssh-agent
        # 이 스텝에서 오류가 발생해도 워크플로우는 중단되지 않습니다.
        continue-on-error: true
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 2. 배포할 이미지 태그 결정
      - name: Determine image tag for deployment
        id: image_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.image_tag }}" ]]; then
            TAG_VALUE="${{ inputs.image_tag }}"
          else
            TAG_VALUE="sha-${GITHUB_SHA::7}"
          fi
          echo "🏷️ Target image tag: ${TAG_VALUE}"
          echo "tag=${TAG_VALUE}" >> "$GITHUB_OUTPUT"

      # 3. 원격 서버에 배포 시도 (실패해도 성공으로 처리)
      - name: Attempt to deploy to remote server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          GH_ACTOR: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
          CONTAINER_NAME: my-app-container
          HOST_PORT: 3000
          CONTAINER_PORT: 3000
        run: |
          REMOTE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"

          echo "🚀 Attempting deployment of ${REMOTE_IMAGE}"
          echo "⚠️ This entire step will be reported as SUCCESSFUL, even if SSH connection fails."

          # '|| true'를 통해 ssh 명령 자체가 실패해도(키가 없어서) 성공으로 간주합니다.
          (ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${SERVER_USER}@${SERVER_HOST}" "
            set -e
            echo '▶ [Remote] Executing deployment commands...'
            echo '${GH_TOKEN}' | docker login ${{ env.REGISTRY }} -u '${GH_ACTOR}' --password-stdin
            docker pull ${REMOTE_IMAGE}
            docker rm -f ${CONTAINER_NAME} || true
            docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} --restart unless-stopped ${REMOTE_IMAGE}
            docker image prune -af || true
            echo '✅ [Remote] Deployment commands sent.'
          ") || true

      # 4. 최종 성공 메시지 출력
      - name: Final Summary
        run: |
          echo "✅ Workflow finished. All steps were set to report success regardless of actual outcome."
          echo "   Please manually verify the deployment on the server."
