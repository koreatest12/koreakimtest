name: "Docker Build & Deploy (EchoCall Enforced)"

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - ".github/workflows/**"
      - "package.json"
      - "package-lock.json"
      - "**/*.ts"
      - "**/*.js"
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Custom tag for the Docker image (optional)"
        required: false
        default: ""
      deploy:
        description: "Trigger deployment to the server"
        required: true
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ########################################################
  # 1. ÎπåÎìú Î∞è Ìë∏Ïãú Ïû° (EchoCall Ï†ÅÏö©)
  ########################################################
  build-and-push:
    name: Build and Push Image (EchoCall)
    runs-on: ubuntu-22.04
    steps:
      - name: "[EchoCall] Start: Checkout"
        run: echo "‚ñ∂ [phase.start.checkout] Running actions/checkout@v4..."
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: "[EchoCall] End: Checkout"
        run: echo "‚ñ∂ [phase.end.checkout] Checkout complete."

      - name: "[EchoCall] Start: Set up QEMU"
        run: echo "‚ñ∂ [phase.start.qemu] Running docker/setup-qemu-action@v3..."
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: "[EchoCall] End: Set up QEMU"
        run: echo "‚ñ∂ [phase.end.qemu] QEMU setup complete."

      - name: "[EchoCall] Start: Set up Docker Buildx"
        run: echo "‚ñ∂ [phase.start.buildx] Running docker/setup-buildx-action@v3..."
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: "[EchoCall] End: Set up Docker Buildx"
        run: echo "‚ñ∂ [phase.end.buildx] Buildx setup complete."

      - name: "[EchoCall] Log in to GitHub Container Registry"
        shell: bash
        run: |
          EXEC() { local L="$1"; shift; echo "‚ñ∂ [${L}] $*"; "$@" || echo "‚ùå [${L}] FAILED (but ignored)"; }
          EXEC "docker.login" echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: "[EchoCall] Start: Extract metadata"
        run: echo "‚ñ∂ [phase.start.meta] Running docker/metadata-action@v5..."
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
      - name: "[EchoCall] End: Extract metadata"
        run: echo "‚ñ∂ [phase.end.meta] Tags calculated:${{ steps.meta.outputs.tags }}"

      - name: "[EchoCall] Build and push Docker image"
        shell: bash
        run: |
          EXEC() { local L="$1"; shift; echo "‚ñ∂ [${L}] $*"; "$@" || echo "‚ùå [${L}] FAILED (but ignored)"; }
          EXEC "docker.buildx.build" docker buildx build \
            --platform linux/amd64 \
            --tag "${{ steps.meta.outputs.tags }}" \
            --label "${{ steps.meta.outputs.labels }}" \
            --push \
            .
          EXEC "build.summary" echo "‚úÖ Image push command executed."

  ########################################################
  # 2. Î∞∞Ìè¨ Ïû° (EchoCall Î∞è Ïò§Î•ò Î¨¥Ïãú Ï†ÅÏö©)
  ########################################################
  deploy:
    name: Deploy to Server (EchoCall + Ignore Errors)
    needs: build-and-push
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy == true)
    runs-on: ubuntu-22.04
    steps:
      - name: "[EchoCall] Start: Add SSH key to ssh-agent"
        run: echo "‚ñ∂ [phase.start.ssh] Running webfactory/ssh-agent@v0.9.0..."
      - name: Add SSH key to ssh-agent
        continue-on-error: true # <--- ÌÇ§ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ Ïù¥ Ïä§ÌÖùÏùÑ ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨ÌïòÍ≥† Í≥ÑÏÜç ÏßÑÌñâ
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: "[EchoCall] End: Add SSH key to ssh-agent"
        run: echo "‚ñ∂ [phase.end.ssh] SSH agent step finished (errors ignored)."

      - name: "[EchoCall] Determine image tag for deployment"
        id: image_tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.image_tag }}" ]]; then
            TAG_VALUE="${{ inputs.image_tag }}"
          else
            TAG_VALUE="sha-${GITHUB_SHA::7}"
          fi
          echo "‚ñ∂ [tag.result] Target image tag: ${TAG_VALUE}"
          echo "tag=${TAG_VALUE}" >> "$GITHUB_OUTPUT"

      - name: "[EchoCall] Attempt to deploy to remote server"
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          GH_ACTOR: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
          CONTAINER_NAME: my-app-container
          HOST_PORT: 3000
          CONTAINER_PORT: 3000
        run: |
          EXEC() { local L="$1"; shift; echo "‚ñ∂ [${L}] $*"; "$@" || true; } # <--- Î™ÖÎ†πÏñ¥ Ïã§Ìå® ÏãúÏóêÎèÑ Î¨¥Ï°∞Í±¥ true Î∞òÌôò
          
          REMOTE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "üöÄ Attempting deployment of ${REMOTE_IMAGE}"
          echo "‚ö†Ô∏è This step will be reported as SUCCESSFUL, even if the SSH connection fails."

          REMOTE_SCRIPT="
            set -e
            echo '‚ñ∂ [Remote] Executing deployment...'
            echo '${GH_TOKEN}' | docker login ${{ env.REGISTRY }} -u '${GH_ACTOR}' --password-stdin
            docker pull ${REMOTE_IMAGE}
            docker rm -f ${CONTAINER_NAME} || true
            docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} --restart unless-stopped ${REMOTE_IMAGE}
            docker image prune -af || true
            echo '‚úÖ [Remote] Deployment commands sent.'
          "
          EXEC "ssh.deploy" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${SERVER_USER}@${SERVER_HOST}" "${REMOTE_SCRIPT}"

      - name: "[EchoCall] Final Summary"
        run: |
          echo "‚úÖ Workflow finished. All steps were set to report success regardless of actual outcome."
          echo "   Please manually verify the deployment on the server."
