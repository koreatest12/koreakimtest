name: "Docker Build & Deploy (Total EchoCall + Tag Fix)"

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - ".github/workflows/**"
      - "package.json"
      - "package-lock.json"
      - "**/*.ts"
      - "**/*.js"
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Custom tag for the Docker image (optional)"
        required: false
        default: ""
      deploy:
        description: "Trigger deployment to the server"
        required: true
        type: boolean
        default: false

# ❗ ghcr.io 푸시 권한 부여 (필수)
permissions:
  contents: read
  packages: write

env:
  TZ: Asia/Seoul
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ########################################################
  # 1. 빌드 및 푸시 잡 (모든 스텝 EchoCall 강제)
  ########################################################
  build-and-push:
    name: Build / Push (Total EchoCall Enforcement)
    runs-on: ubuntu-22.04

    steps:
      - name: "[EchoCall] BEFORE: Checkout"
        run: echo "▶ [executing] actions/checkout@v5"
      - name: "STEP 1: Checkout repository"
        uses: actions/checkout@v5
      - name: "[EchoCall] AFTER: Checkout"
        run: echo "✅ [completed] actions/checkout@v5"

      - name: "[EchoCall] STEP 2: Ledger Simulation"
        shell: bash
        run: |
          set -e
          EXEC() { local L="$1"; shift; echo "▶ [${L}] $*"; "$@"; }
          EXEC "mkdir.ledger" mkdir -p ".github/ledger_out"
          EXEC "gen.ledger" bash -c "echo 'timestamp,tx_id,status\n2025-10-31T10:39:36,tx_c44a,confirmed' > .github/ledger_out/ledger.csv"
          EXEC "log.simdone" echo "✅ Ledger simulation complete."

      - name: "[EchoCall] BEFORE: Set up QEMU"
        run: echo "▶ [executing] docker/setup-qemu-action@v3"
      - name: "STEP 3: Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "[EchoCall] AFTER: Set up QEMU"
        run: echo "✅ [completed] docker/setup-qemu-action@v3"

      - name: "[EchoCall] BEFORE: Set up Docker Buildx"
        run: echo "▶ [executing] docker/setup-buildx-action@v3"
      - name: "STEP 4: Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "[EchoCall] AFTER: Set up Docker Buildx"
        run: echo "✅ [completed] docker/setup-buildx-action@v3"

      - name: "[EchoCall] STEP 5: Login to GHCR"
        shell: bash
        run: |
          set -e
          EXEC() { local L="$1"; shift; echo "▶ [${L}] $*"; "$@" || { echo "❌ [${L}] FAILED!"; exit 1; }; }
          EXEC "docker.login" sh -c "echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin"
          echo "✅ [completed] Login to GHCR"

      - name: "[EchoCall] BEFORE: Extract metadata"
        run: echo "▶ [executing] docker/metadata-action@v5"
      - name: "STEP 6: Extract metadata for Docker"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short
            type=ref,event=branch
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
      - name: "[EchoCall] AFTER: Extract metadata"
        run: echo "✅ [completed] Tags calculated:${{ steps.meta.outputs.tags }}"

      - name: "[EchoCall] STEP 7: Build and push Docker image"
        shell: bash
        run: |
          set -e
          EXEC() { local L="$1"; shift; echo "▶ [${L}] $*"; "$@" || { echo "❌ [${L}] FAILED!"; exit 1; }; }
          
          # ❗ 수정: 여러 줄의 태그를 각각의 --tag 인수로 변환하는 로직
          TAGS="${{ steps.meta.outputs.tags }}"
          DOCKER_TAG_ARGS=""
          for T in $TAGS; do
            DOCKER_TAG_ARGS="$DOCKER_TAG_ARGS --tag $T"
          done
          
          echo "Applying tags: $DOCKER_TAG_ARGS"
          
          # 변환된 태그 인수를 명령어에 적용
          EXEC "docker.buildx.build" docker buildx build \
            --platform linux/amd64 \
            $DOCKER_TAG_ARGS \
            --label "${{ steps.meta.outputs.labels }}" \
            --push .
            
          echo "✅ [completed] Image push command executed."

  ########################################################
  # 2. 배포 잡 (모든 스텝 EchoCall 및 오류 무시)
  ########################################################
  deploy:
    name: Deploy to Server (Total EchoCall + Ignore Errors)
    needs: build-and-push
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy == true)
    runs-on: ubuntu-22.04
    steps:
      - name: "[EchoCall] BEFORE: Add SSH key"
        run: echo "▶ [executing] webfactory/ssh-agent@v0.9.0 (errors will be ignored)"
      - name: "STEP 1: Add SSH key to ssh-agent"
        continue-on-error: true # 키 오류가 발생해도 계속 진행
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: "[EchoCall] AFTER: Add SSH key"
        run: echo "✅ [completed] SSH agent step finished. Errors were ignored."

      - name: "[EchoCall] STEP 2: Determine image tag"
        id: image_tag
        shell: bash
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.image_tag }}" ]]; then
            TAG_VALUE="${{ inputs.image_tag }}"
          else
            # build-and-push 잡에서 사용한 짧은 SHA와 동일한 포맷으로 수정
            TAG_VALUE="sha-${GITHUB_SHA::7}"
          fi
          echo "▶ [tag.result] Target image tag: ${TAG_VALUE}"
          echo "tag=${TAG_VALUE}" >> "$GITHUB_OUTPUT"
          echo "✅ [completed] Image tag determined."

      - name: "[EchoCall] STEP 3: Attempt to deploy"
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
        run: |
          echo "▶ [ssh.deploy] Attempting to deploy image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "⚠️ This step will succeed even if the SSH connection fails."
          (ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${SERVER_USER}@${SERVER_HOST}" "echo 'Remote deployment script would run here'") || true
          echo "✅ [completed] Deployment attempt finished."
