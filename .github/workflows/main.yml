name: "üîÑ Concurrency Control + Runner Self-Heal + Auto-Retry (Stable Logs)"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  REPORT_DIR: .github/echo_report

jobs:
  ##########################################################################
  # 0. Îü¨ÎÑà ÏÉÅÌÉú Ï†êÍ≤Ä & Ï≤≠ÏÜå
  ##########################################################################
  prep_and_clean:
    name: "Runner Pre-Check / Cleanup"
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      disk_ok: ${{ steps.check.outputs.disk_ok }}
      mem_ok:  ${{ steps.check.outputs.mem_ok }}

    steps:
      - name: Prep dirs (initial)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

      - name: Runner snapshot (before cleanup)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          {
            echo "=== RUNNER SNAPSHOT (BEFORE CLEANUP) ==="
            echo "--- uname -a"
            uname -a || true
            echo
            echo "--- df -h"
            df -h || true
            echo
            echo "--- free -m"
            free -m || true
            echo
            echo "--- docker ps -a"
            docker ps -a || true
            echo
            echo "--- docker images"
            docker images || true
            echo
          } | tee "${LOG_DIR}/00_runner_snapshot_before.txt"

      - name: Cleanup docker/junk to free resources
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          echo ">>> docker system prune -af (safe cleanup)" | tee "${LOG_DIR}/01_cleanup.txt"
          docker system prune -af || true
          docker volume prune -f || true

          echo ">>> apt-get clean / autoremove" | tee -a "${LOG_DIR}/01_cleanup.txt"
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true

      - name: Check resources after cleanup
        id: check
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          DISK_AVAIL_GB=$(df -BG / | awk 'NR==2 {gsub("G","",$4); print $4}')
          MEM_FREE_MB=$(free -m | awk '/Mem:/ {print $4}')

          DISK_OK="true"
          MEM_OK="true"
          if [ "$DISK_AVAIL_GB" -lt 2 ]; then
            DISK_OK="false"
          fi
          if [ "$MEM_FREE_MB" -lt 512 ]; then
            MEM_OK="false"
          fi

          echo "disk_ok=$DISK_OK" >> $GITHUB_OUTPUT
          echo "mem_ok=$MEM_OK" >> $GITHUB_OUTPUT

          {
            echo "=== RESOURCE CHECK (AFTER CLEANUP) ==="
            echo "DISK_AVAIL_GB=$DISK_AVAIL_GB"
            echo "DISK_OK=$DISK_OK"
            echo "MEM_FREE_MB=$MEM_FREE_MB"
            echo "MEM_OK=$MEM_OK"
          } | tee "${LOG_DIR}/02_resource_check_after.txt"

      - name: Upload runner-prep logs
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: runner-prep
          path: |
            ${{ env.LOG_DIR }}/00_runner_snapshot_before.txt
            ${{ env.LOG_DIR }}/01_cleanup.txt
            ${{ env.LOG_DIR }}/02_resource_check_after.txt
            ${{ env.LOG_DIR }}/.keep
          if-no-files-found: warn


  ##########################################################################
  # 1. Ïã§Ï†ú ÏûëÏóÖ 1Ï∞® ÏãúÎèÑ
  ##########################################################################
  job_attempt_1:
    name: "Build & Test (Attempt 1)"
    runs-on: ubuntu-latest
    needs: prep_and_clean
    continue-on-error: true
    outputs:
      attempt1_status: ${{ steps.mark.outputs.attempt1_status }}

    steps:
      # checkoutÏù¥ ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§Î•º Ï¥àÍ∏∞ÌôîÌïòÎ©¥ÏÑú Ïö∞Î¶¨Í∞Ä ÎßåÎì† LOG_DIRÏùÑ ÏßÄÏö∏ Ïàò ÏûàÏúºÎØÄÎ°ú
      # checkoutÏùÑ Ìï≠ÏÉÅ Î®ºÏ†Ä ÌïòÍ≥†, Í∑∏ Îã§Ïùå Îã§Ïãú mkdir -p
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prep dirs (post-checkout)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          # Ï∂îÍ∞ÄÏ†ÅÏúºÎ°ú ÌååÏù¥ÌîÑÎùºÏù∏ / Ïª®ÌÖçÏä§Ìä∏ ÏöîÏïΩÎèÑ ÎÇ®Í≤®ÎëêÎ©¥ Ï¢ãÏùå
          {
            echo "=== PIPELINE CONTEXT (ATTEMPT 1) ==="
            echo "EVENT_NAME=${{ github.event_name }}"
            echo "REF=${{ github.ref }}"
            echo "SHA=${{ github.sha }}"
            echo "ACTOR=${{ github.actor }}"
            echo "RUN_ID=${{ github.run_id }}"
            echo "RUN_NUMBER=${{ github.run_number }}"
            echo "WORKFLOW=${{ github.workflow }}"
            echo "TZ=$TZ"
          } | tee "${LOG_DIR}/09_attempt1_context.txt"

      - name: Runner snapshot (attempt1 start)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          {
            echo "=== RUNNER SNAPSHOT (ATTEMPT 1 START) ==="
            df -h || true
            free -m || true
            docker ps -a || true
          } | tee "${LOG_DIR}/10_snapshot_attempt1_start.txt"

      - name: Build/Test main logic
        id: buildtest
        shell: bash
        run: |
          # Ïó¨Í∏∞ÏÑú -eÎ•º Í±∏Î©¥ Ï§ëÍ∞Ñ Ïã§Ìå®Ïãú Î∞îÎ°ú Ï£ΩÍ∏∞ ÎïåÎ¨∏Ïóê,
          # Ïã§Ï†ú CI ÏûëÏóÖÏóê Îî∞Îùº Ï°∞Ï†ï Í∞ÄÎä•. Ïó¨Í∏∞ÏÑúÎäî Ï£ΩÏßÄ ÏïäÍ≤å -Eeuo pipefail Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          echo "‚öô Attempt #1 running on ${{ github.ref }} (commit ${{ github.sha }})" \
            | tee "${LOG_DIR}/11_attempt1_run.txt"

          # Ïã§Ï†ú ÏûëÏóÖ(ÎπåÎìú/ÌÖåÏä§Ìä∏/ÎèÑÏª§ Îì±) ÎÑ£ÏùÑ Î∂ÄÎ∂Ñ
          echo "Simulating heavy workload in attempt #1..."
          sleep 60

          echo "Attempt #1 work finished." | tee -a "${LOG_DIR}/11_attempt1_run.txt"

      - name: Mark attempt1 status
        id: mark
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          # Ïó¨Í∏∞ÏÑú Ïã§Ìå® Í∞êÏßÄ Î°úÏßÅÏùÑ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ï¶à Í∞ÄÎä•:
          # Ïòà: ÎπåÎìú Îã®Í≥ÑÏóêÏÑú echo "::error::"Í∞Ä ÏûàÏóàÎäîÏßÄ Í≤ÄÏÇ¨ÌïòÍ±∞ÎÇò,
          #     ÎπåÎìú exit codeÎ•º Ïû°ÏïÑÎëêÍ≥† ÎπÑÍµê.
          # ÌòÑÏû¨Îäî ÏÑ±Í≥µ Í∞ÄÏ†ï.
          STATUS="success"

          echo "attempt1_status=$STATUS" >> $GITHUB_OUTPUT
          echo "attempt1_status=$STATUS" | tee "${LOG_DIR}/12_attempt1_status.txt"

      - name: Upload attempt1 logs
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: attempt1-logs
          path: |
            ${{ env.LOG_DIR }}/09_attempt1_context.txt
            ${{ env.LOG_DIR }}/10_snapshot_attempt1_start.txt
            ${{ env.LOG_DIR }}/11_attempt1_run.txt
            ${{ env.LOG_DIR }}/12_attempt1_status.txt
            ${{ env.LOG_DIR }}/.keep
          if-no-files-found: warn


  ##########################################################################
  # 2. ÏûêÎèô Ïû¨ÏãúÎèÑ (2Ï∞® ÏãúÎèÑ)
  ##########################################################################
  job_attempt_2:
    name: "Build & Test (Attempt 2 / Self-Heal Retry)"
    runs-on: ubuntu-latest
    needs: [prep_and_clean, job_attempt_1]
    if: ${{ needs.job_attempt_1.outputs.attempt1_status != 'success' }}
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prep dirs (post-checkout)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          {
            echo "=== PIPELINE CONTEXT (ATTEMPT 2) ==="
            echo "EVENT_NAME=${{ github.event_name }}"
            echo "REF=${{ github.ref }}"
            echo "SHA=${{ github.sha }}"
            echo "ACTOR=${{ github.actor }}"
            echo "RUN_ID=${{ github.run_id }}"
            echo "RUN_NUMBER=${{ github.run_number }}"
            echo "WORKFLOW=${{ github.workflow }}"
            echo "TZ=$TZ"
          } | tee "${LOG_DIR}/19_attempt2_context.txt"

      - name: Runner snapshot (attempt2 start)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          {
            echo "=== RUNNER SNAPSHOT (ATTEMPT 2 START) ==="
            df -h || true
            free -m || true
            docker ps -a || true
          } | tee "${LOG_DIR}/20_snapshot_attempt2_start.txt"

      - name: Build/Test retry logic
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          echo "‚ö† Attempt #2 retry due to resource/previous failure" \
            | tee "${LOG_DIR}/21_attempt2_run.txt"

          echo "Retrying heavy workload in attempt #2..."
          sleep 60

          echo "Attempt #2 finished." | tee -a "${LOG_DIR}/21_attempt2_run.txt"

      - name: Upload attempt2 logs
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: attempt2-logs
          path: |
            ${{ env.LOG_DIR }}/19_attempt2_context.txt
            ${{ env.LOG_DIR }}/20_snapshot_attempt2_start.txt
            ${{ env.LOG_DIR }}/21_attempt2_run.txt
            ${{ env.LOG_DIR }}/.keep
          if-no-files-found: warn


  ##########################################################################
  # 3. ÏµúÏ¢Ö ÏöîÏïΩ Î∞è Ï†ÑÏ≤¥ Î°úÍ∑∏ Î≤àÎì§ ÏóÖÎ°úÎìú
  ##########################################################################
  final_report:
    name: "Final Report / Collected Evidence"
    runs-on: ubuntu-latest
    needs:
      - prep_and_clean
      - job_attempt_1
      - job_attempt_2
    if: always()

    steps:
      - name: Prep dirs (final stage)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${REPORT_DIR}"
          touch "${LOG_DIR}/.keep" "${REPORT_DIR}/.keep"

          {
            echo "=== FINAL SUMMARY ==="
            echo "event_name=${{ github.event_name }}"
            echo "ref=${{ github.ref }}"
            echo "sha=${{ github.sha }}"
            echo "actor=${{ github.actor }}"
            echo
            echo "prep_and_clean.disk_ok=${{ needs.prep_and_clean.outputs.disk_ok }}"
            echo "prep_and_clean.mem_ok=${{ needs.prep_and_clean.outputs.mem_ok }}"
            echo
            echo "attempt1_status=${{ needs.job_attempt_1.outputs.attempt1_status }}"
            echo "(attempt2 ran? -> ${{ needs.job_attempt_2.result }})"
            echo
            date
          } | tee "${REPORT_DIR}/final_summary.txt"

      - name: Upload final bundle
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: final-summary-and-logs
          path: |
            ${{ env.LOG_DIR }}/
            ${{ env.REPORT_DIR }}/
          if-no-files-found: warn
