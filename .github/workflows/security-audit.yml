name: Python Security Audit

on:
  # Run weekly on Monday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 1'

  # Manual trigger
  workflow_dispatch:

  # Run on push to main (optional)
  # push:
  #   branches: [main, master]

jobs:
  security-audit:
    name: Security Audit & Vulnerability Scan
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-security.txt

      - name: Run security audit
        id: audit
        continue-on-error: true
        run: |
          python src/utils/pysec_update.py `
            --req requirements.txt `
            --upgrade none `
            --bandit `
            --reports .github/echo_security `
            --verbose

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: .github/echo_security/
          retention-days: 90

      - name: Parse and display summary
        if: always()
        shell: pwsh
        run: |
          $summaryFiles = Get-ChildItem -Path .github/echo_security -Filter "security-summary-*.md"
          if ($summaryFiles) {
            $latest = $summaryFiles | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            Write-Host "`n=== Security Audit Summary ===`n"
            Get-Content $latest.FullName
          }

      - name: Check for critical vulnerabilities
        shell: pwsh
        run: |
          $jsonFiles = Get-ChildItem -Path .github/echo_security -Filter "pip-audit-*.json"
          if ($jsonFiles) {
            $latest = $jsonFiles | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            $audit = Get-Content $latest.FullName | ConvertFrom-Json
            $vulnCount = ($audit.vulnerabilities | Measure-Object).Count

            Write-Host "Found $vulnCount vulnerabilities"

            if ($vulnCount -gt 0) {
              Write-Host "::warning::Security vulnerabilities detected. Review audit reports."
              # Uncomment to fail on ANY vulnerability:
              # exit 1
            } else {
              Write-Host "::notice::No vulnerabilities detected âœ…"
            }
          }

      - name: Create issue on vulnerabilities (optional)
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security Vulnerabilities Detected',
              body: `Security audit detected vulnerabilities.\n\nView reports: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              labels: ['security', 'automated']
            })
