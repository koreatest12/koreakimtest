name: Dependency Security Check

on:
  # Run weekly on Monday at 3 AM UTC
  schedule:
    - cron: '0 3 * * 1'

  # Manual trigger
  workflow_dispatch:

  # Run on pull requests that modify dependencies
  pull_request:
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - '**/requirements.txt'
      - '.github/workflows/dependency-check.yml'

  # Run on push to main
  push:
    branches: [main]
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - '**/requirements.txt'

jobs:
  node-security:
    name: Node.js Dependency Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - anthropic-cost-tracker/nodejs
          - mcp-hello-js
          - mcp-fs
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Check if package.json exists
        id: check-package
        run: |
          if [ -f "${{ matrix.project }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-package.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        run: npm ci || npm install

      - name: Run npm audit
        if: steps.check-package.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        continue-on-error: true
        run: |
          echo "## NPM Audit for ${{ matrix.project }}" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit.json || true
          npm audit >> $GITHUB_STEP_SUMMARY || echo "Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Check for high/critical vulnerabilities
        if: steps.check-package.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        run: |
          if [ -f "audit.json" ]; then
            HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
            CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
            echo "High severity: $HIGH_COUNT"
            echo "Critical severity: $CRITICAL_COUNT"
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "::error::Found $CRITICAL_COUNT critical vulnerabilities in ${{ matrix.project }}"
            fi
            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "::warning::Found $HIGH_COUNT high severity vulnerabilities in ${{ matrix.project }}"
            fi
          fi

      - name: Upload audit results
        if: steps.check-package.outputs.exists == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-${{ matrix.project }}-${{ github.run_number }}
          path: ${{ matrix.project }}/audit.json
          retention-days: 30

  python-security:
    name: Python Dependency Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - anthropic-cost-tracker/python
          - mcp-hello-py
          - mcp-python-server
          - mcp-apache-server
          - .
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Check if requirements.txt exists
        id: check-requirements
        run: |
          if [ -f "${{ matrix.project }}/requirements.txt" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install pip-audit
        if: steps.check-requirements.outputs.exists == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety bandit

      - name: Run pip-audit
        if: steps.check-requirements.outputs.exists == 'true'
        continue-on-error: true
        run: |
          echo "## Pip Audit for ${{ matrix.project }}" >> $GITHUB_STEP_SUMMARY
          pip-audit -r ${{ matrix.project }}/requirements.txt --format json > ${{ matrix.project }}/pip-audit.json || true
          pip-audit -r ${{ matrix.project }}/requirements.txt >> $GITHUB_STEP_SUMMARY || echo "Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Run Safety check
        if: steps.check-requirements.outputs.exists == 'true'
        continue-on-error: true
        run: |
          echo "## Safety Check for ${{ matrix.project }}" >> $GITHUB_STEP_SUMMARY
          safety check -r ${{ matrix.project }}/requirements.txt --json > ${{ matrix.project }}/safety.json || true
          safety check -r ${{ matrix.project }}/requirements.txt >> $GITHUB_STEP_SUMMARY || echo "Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Upload audit results
        if: steps.check-requirements.outputs.exists == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: python-audit-${{ matrix.project }}-${{ github.run_number }}
          path: |
            ${{ matrix.project }}/pip-audit.json
            ${{ matrix.project }}/safety.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: on-failure

  create-issue-on-failure:
    name: Create Issue on Vulnerabilities
    runs-on: ubuntu-latest
    needs: [node-security, python-security]
    if: failure() && github.event_name == 'schedule'
    steps:
      - name: Create issue
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,dependency-check',
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸš¨ Dependency Security Vulnerabilities Detected',
                body: `Dependency security check detected vulnerabilities in one or more projects.\n\n**Action Required:**\n- Review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n- Check the uploaded artifacts for detailed reports\n- Update vulnerable dependencies\n\n**Affected Projects:**\nCheck the individual job results for details.`,
                labels: ['security', 'dependency-check', 'automated']
              });
            }
