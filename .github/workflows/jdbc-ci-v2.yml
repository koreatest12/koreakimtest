name: "🔐 Spring Boot JDBC CI + DB Test (V3 - Spring Boot)"

on:
  push:
    branches: [ "main", "develop", "feature/**" ]
  pull_request:
    branches: [ "main" ]
  # workflow_dispatch: 10개 이하 요구사항 만족 (총 4개)
  workflow_dispatch:
    inputs:
      mysql_user:
        description: "MySQL 유저 (기본 root)"
        required: false
        default: "root"
      mysql_pass:
        description: "MySQL 패스워드 (기본 password)"
        required: false
        default: "password"
      mysql_db:
        description: "DB명 (기본 mydb)"
        required: false
        default: "mydb"
      table_name:
        description: "테스트 테이블명 (기본 users)"
        required: false
        default: "users"

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/echo_artifacts

jobs:
  build-and-test:
    name: "Build + MySQL Init + Spring Boot Test"
    runs-on: ubuntu-22.04

    # GitHub Actions에서 MySQL 컨테이너를 서비스로 띄움
    services:
      mysql:
        image: mysql:8.0
        env:
          # 서비스 시작 시 사용할 고정값 (dispatch input을 사용해도 무방)
          MYSQL_ROOT_PASSWORD: password 
          MYSQL_DATABASE: mydb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -ppassword --silent"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=20

    steps:
      #################################################################
      # 0. 준비: 체크아웃 + 로그 디렉토리 확보
      #################################################################
      - name: "[echo] Checkout repo"
        uses: actions/checkout@v4

      - name: "[echo] Prepare echo dirs (logs, artifacts)"
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "[$(date +'%F %T%z')] mkdir -p ${LOG_DIR} ${ARTIFACT_DIR}"
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          echo "runner.os=$(uname -a)"        | tee    "${LOG_DIR}/runner_info.log"
          echo "pwd=$(pwd)"                  | tee -a "${LOG_DIR}/runner_info.log"
          echo "ls -R top-level:"            | tee -a "${LOG_DIR}/runner_info.log"
          ls -R .                            | tee -a "${LOG_DIR}/runner_info.log"

      #################################################################
      # 1. JDK / Maven 세팅
      #################################################################
      - name: "[echo] Setup Temurin Java 17"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: "[echo] Show Java info"
        shell: bash
        run: |
          set -Eeuo pipefail
          java -version            | tee "${LOG_DIR}/java_version.log"
          mvn -v                   | tee "${LOG_DIR}/maven_version.log" || true

      #################################################################
      # 2. MySQL health 대기 + 스키마 생성
      #################################################################
      - name: "[echo] Wait for MySQL service to be healthy"
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Waiting for mysql service health..."
          for i in {1..30}; do
            # 서비스 ID를 직접 참조하여 헬스체크
            HEALTH=$(docker inspect --format='{{json .State.Health.Status}}' ${{ job.services.mysql.id }})
            echo "[$i] MySQL health: $HEALTH" | tee -a "${LOG_DIR}/mysql_wait.log"
            if [ "$HEALTH" = "\"healthy\"" ]; then
              echo "MySQL is healthy." | tee -a "${LOG_DIR}/mysql_wait.log"
              break
            fi
            sleep 2
          done

      - name: "[echo] Install MySQL client (for schema init)"
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y mysql-client
          mysql --version | tee "${LOG_DIR}/mysql_client_version.log"

      - name: "[echo] Init schema (CREATE TABLE users)"
        shell: bash
        run: |
          set -Eeuo pipefail
          # workflow_dispatch 입력을 사용하거나 서비스의 고정값 사용
          DB_USER="${{ github.event.inputs.mysql_user || 'root' }}"
          DB_PASS="${{ github.event.inputs.mysql_pass || 'password' }}"
          DB_NAME="${{ github.event.inputs.mysql_db   || 'mydb' }}"
          TBL="${{ github.event.inputs.table_name     || 'users' }}"
          
          echo "Preparing schema for DB=${DB_NAME}, table=${TBL}" \
            | tee "${LOG_DIR}/mysql_schema_init.log"

          # EOF(heredoc) 대신 -e 플래그를 사용해 YAML 들여쓰기 문제를 원천 방지
          SQL_CREATE="CREATE TABLE IF NOT EXISTS ${TBL} ( \
            id   INT AUTO_INCREMENT PRIMARY KEY, \
            name VARCHAR(100) NOT NULL, \
            age  INT NOT NULL \
          );"
          
          echo "Executing SQL: ${SQL_CREATE}" | tee -a "${LOG_DIR}/mysql_schema_init.log"
          
          # [Warning]은 mysql client의 표준 경고이므로 무시합니다.
          mysql -h 127.0.0.1 -P 3306 -u"${DB_USER}" -p"${DB_PASS}" "${DB_NAME}" -e "${SQL_CREATE}" \
            2>&1 | tee -a "${LOG_DIR}/mysql_schema_init.log"
          
          echo "---" | tee -a "${LOG_DIR}/mysql_schema_init.log"
          echo "Executing SQL: SHOW TABLES;" | tee -a "${LOG_DIR}/mysql_schema_init.log"
          
          mysql -h 127.0.0.1 -P 3306 -u"${DB_USER}" -p"${DB_PASS}" "${DB_NAME}" -e "SHOW TABLES;" \
            2>&1 | tee -a "${LOG_DIR}/mysql_schema_init.log"

      #################################################################
      # 3. Maven Build (Spring Boot Test 포함)
      #################################################################
      - name: "[echo] mvn -B clean package (Spring Boot Test with DB)"
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "[BUILD] mvn clean package start (with Test DB Context)" | tee "${LOG_DIR}/maven_build.log"
          
          # Spring Boot Test가 이 환경 변수를 자동으로 인식하여 127.0.0.1:3306 DB에 연결합니다.
          # (src/test/resources/application.properties보다 우선순위가 높음)
          export SPRING_DATASOURCE_URL="jdbc:mysql://127.0.0.1:3306/${{ github.event.inputs.mysql_db   || 'mydb' }}?useSSL=false&serverTimezone=UTC"
          export SPRING_DATASOURCE_USERNAME="${{ github.event.inputs.mysql_user || 'root' }}"
          export SPRING_DATASOURCE_PASSWORD="${{ github.event.inputs.mysql_pass || 'password' }}"

          echo "Injecting Spring Test Datasource:" | tee -a "${LOG_DIR}/maven_build.log"
          echo "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" | tee -a "${LOG_GDIR}/maven_build.log"
          echo "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" | tee -a "${LOG_DIR}/maven_build.log"

          # -B (배치 모드)로 실행. -q(quiet)는 로그를 위해 제거
          mvn -B clean package 2>&1 | tee -a "${LOG_DIR}/maven_build.log"
          
          BUILD_RC=${PIPESTATUS[0]}
          echo "[BUILD] mvn RC=${BUILD_RC}"      | tee -a "${LOG_DIR}/maven_build.log"
          if [ "${BUILD_RC}" != "0" ]; then
            echo "[BUILD] Maven build failed (Test failed or Compile error) ❌" | tee -a "${LOG_DIR}/maven_build.log"
            exit 1
          else
            echo "[BUILD] Maven build OK (Test OK) ✅"     | tee -a "${LOG_DIR}/maven_build.log"
          fi

      #################################################################
      # 4. 결과 아티팩트 업로드 (증적 수집)
      #################################################################
      - name: "[echo] Collect logs/artifacts (with Test Reports)"
        if: always() # 실패 여부와 관계없이 항상 실행
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Copying logs into artifact dir..."
          cp -r "${LOG_DIR}" "${ARTIFACT_DIR}/logs" || true
          
          echo "Copying JARs into artifact dir..."
          mkdir -p "${ARTIFACT_DIR}/build_jars"
          find . -name "*.jar" -exec cp {} "${ARTIFACT_DIR}/build_jars" \; 2>/dev/null || true
          
          echo "Copying Maven test reports..."
          mkdir -p "${ARTIFACT_DIR}/test-reports"
          cp -r target/surefire-reports "${ARTIFACT_DIR}/test-reports" 2>/dev/null || true

      - name: "[echo] Upload echo logs & jars"
        if: always() # 실패 여부와 관계없이 항상 실행
        uses: actions/upload-artifact@v4
        with:
            name: spring-ci-artifacts-${{ github.run_id }}
            path: ${{ env.ARTIFACT_DIR }}
            if-no-files-found: warn
