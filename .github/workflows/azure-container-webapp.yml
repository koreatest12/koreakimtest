name: "🐳 Azure WebApp Container Deploy — EchoOps SafeContinue (rev6 no-skip)"

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      deploy_env:        # 1
        description: "배포 환경 태그 (dev/stage/prod 등)"
        default: "dev"
        required: false
      extra_tag:         # 2
        description: "추가 커스텀 이미지 태그 (비워도 됨)"
        default: ""
        required: false
      run_healthcheck:   # 3 (지금은 항상 실행하지만 값은 그대로 기록에만 사용)
        description: "배포 후 curl로 헬스체크 할까요?"
        type: boolean
        default: true
      force_success_msg: # 4
        description: "실패해도 마지막에 성공 메시지 강제로 찍기"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write      # GHCR push
  id-token: write      # 미래 확장용 (OIDC)
  security-events: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/echo_artifacts
  AZURE_WEBAPP_NAME: your-app-name            # 실제 Azure Web App 이름으로 교체 필수
  DOCKER_REGISTRY: ghcr.io
  IMAGE_REPO_RAW: ${{ github.repository }}    # ex) koreatest12/koreakimtest
  GIT_SHA: ${{ github.sha }}
  TS_NOW: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

concurrency:
  group: azure-webapp-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    name: "① Build & Push Image (GHCR)"
    runs-on: ubuntu-24.04

    steps:
      - name: Init dirs + helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'EOF'
          TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
          log_ok(){   echo "✅ [$(TS)] $*"; }
          log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
          log_err(){  echo "❌ [$(TS)] $*" >&2; }
          safe_run() {
            local step="$1"; shift
            log_ok "▶ ${step} :: $*"
            mkdir -p "${LOG_DIR:-.github/echo_logs}" "${ARTIFACT_DIR:-.github/echo_artifacts}" || true
            "$@" 2>&1
            rc=$?
            if [ $rc -eq 0 ]; then
              log_ok "${step} OK"
            else
              log_err "${step} FAILED (exit=${rc}) — continue anyway"
            fi
            return 0  # 항상 0 반환 → step 죽지 않음
          }
          EOF
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Helpers ready. Dirs ready: ${LOG_DIR}, ${ARTIFACT_DIR}"

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Prepare tag/env variables
        id: prep
        shell: bash
        run: |
          set -Eeuo pipefail
          . /tmp/echo_helpers.sh

          repo_lc="$(echo "${IMAGE_REPO_RAW}" | tr '[:upper:]' '[:lower:]')"

          echo "REPO_LC=${repo_lc}"                                  >> $GITHUB_ENV
          echo "SHA_TAG=${GIT_SHA}"                                  >> $GITHUB_ENV
          echo "LATEST_TAG=latest"                                   >> $GITHUB_ENV
          echo "RUN_TAG=${TS_NOW}"                                   >> $GITHUB_ENV
          echo "INPUT_TAG=${{ github.event.inputs.extra_tag }}"      >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.deploy_env }}"    >> $GITHUB_ENV
          echo "IMG_BASE=${DOCKER_REGISTRY}/${repo_lc}"              >> $GITHUB_ENV
          echo "HEALTHCHECK_WANTED=${{ github.event.inputs.run_healthcheck }}" >> $GITHUB_ENV

          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          log_ok "Repo lowercased: ${repo_lc}"
          log_ok "Image base: ${DOCKER_REGISTRY}/${repo_lc}"
          log_ok "Tags -> sha:${GIT_SHA}, run:${TS_NOW}, latest:latest, extra:${{ github.event.inputs.extra_tag }}"
          log_ok "Deploy env: ${{ github.event.inputs.deploy_env }}"
          log_ok "Healthcheck desired: ${{ github.event.inputs.run_healthcheck }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login GHCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker build (tag :sha)
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          safe_run "docker.build" \
            docker build \
              --progress=plain \
              --file Dockerfile \
              --tag "${IMG_BASE}:${SHA_TAG}" \
              .

          exit 0

      - name: Push sha & runid tags
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          # push :sha
          safe_run "docker.push.sha" docker push "${IMG_BASE}:${SHA_TAG}"

          # tag/push :runid
          docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${RUN_TAG}" 2>/dev/null
          safe_run "docker.push.runid" docker push "${IMG_BASE}:${RUN_TAG}"

          exit 0

      - name: Push latest & extra_tag (only on main)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          # latest
          docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${LATEST_TAG}" 2>/dev/null
          safe_run "docker.push.latest" docker push "${IMG_BASE}:${LATEST_TAG}"

          # extra tag (수동 태그)
          if [ -n "${INPUT_TAG}" ]; then
            docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${INPUT_TAG}" 2>/dev/null
            safe_run "docker.push.extra" docker push "${IMG_BASE}:${INPUT_TAG}"
          else
            log_warn "No extra_tag provided, skipping extra push"
          fi

          exit 0

      - name: Security scan placeholder
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          log_ok "Security scan placeholder for ${IMG_BASE}:${SHA_TAG}" > "${LOG_DIR}/security_scan.log"

          exit 0

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .github/echo_logs
            .github/echo_artifacts
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: "② Deploy to Azure Web App"
    runs-on: ubuntu-24.04
    needs: build-and-push
    environment:
      name: "Development"

    steps:
      - name: Init dirs + helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'EOF'
          TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
          log_ok(){   echo "✅ [$(TS)] $*"; }
          log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
          log_err(){  echo "❌ [$(TS)] $*" >&2; }
          safe_run() {
            local step="$1"; shift
            log_ok "▶ ${step} :: $*"
            mkdir -p "${LOG_DIR:-.github/echo_logs}" "${ARTIFACT_DIR:-.github/echo_artifacts}" || true
            "$@" 2>&1
            rc=$?
            if [ $rc -eq 0 ]; then
              log_ok "${step} OK"
            else
              log_err "${step} FAILED (exit=${rc}) — continue anyway"
            fi
            return 0
          }
          EOF
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Deploy helpers ready"

      - name: Recompute image refs
        shell: bash
        run: |
          set -Eeuo pipefail
          . /tmp/echo_helpers.sh

          repo_lc="$(echo "${IMAGE_REPO_RAW}" | tr '[:upper:]' '[:lower:]')"

          echo "REPO_LC=${repo_lc}"                     >> $GITHUB_ENV
          echo "IMG_BASE=${DOCKER_REGISTRY}/${repo_lc}" >> $GITHUB_ENV
          echo "SHA_TAG=${GIT_SHA}"                     >> $GITHUB_ENV

          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          log_ok "Will deploy image: ${DOCKER_REGISTRY}/${repo_lc}:${GIT_SHA}"
          log_ok "Target WebApp: ${AZURE_WEBAPP_NAME}"

      - name: Check publish profile presence (log only, no skip)
        shell: bash
        env:
          AZURE_PUBLISH_PROFILE: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          if [ -z "${AZURE_PUBLISH_PROFILE}" ]; then
            log_warn "AZURE_WEBAPP_PUBLISH_PROFILE is NOT set. Deployment may fail."
            echo "DEPLOY_ENABLED=false" >> $GITHUB_ENV
          else
            log_ok "AZURE_WEBAPP_PUBLISH_PROFILE is present. Proceeding."
            echo "DEPLOY_ENABLED=true" >> $GITHUB_ENV
          fi

          exit 0

      # 핵심 배포 단계
      # slot-name / package 제거.
      # 강제 실행, 에러 나도 멈추지 않도록 continue-on-error: true
      - name: Deploy to Azure Web App (publish-profile mode, always run)
        id: deploy-webapp
        continue-on-error: true
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: '${{ env.DOCKER_REGISTRY }}/${{ env.REPO_LC }}:${{ env.SHA_TAG }}'

      - name: Record deploy output (always run)
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          DEPLOY_URL="${{ steps.deploy-webapp.outputs.webapp-url }}"
          if [ -z "$DEPLOY_URL" ]; then
            log_warn "webapps-deploy didn't emit webapp-url output (possibly failed auth/deploy)."
            DEPLOY_URL="(no-url)"
          else
            log_ok "Azure webapp-url -> $DEPLOY_URL"
          fi

          echo "$DEPLOY_URL" > "${LOG_DIR}/deploy_url.txt"

          exit 0

      - name: Healthcheck (always run, no skip)
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          TARGET_URL="$(cat ${LOG_DIR}/deploy_url.txt 2>/dev/null || true)"
          if [ -z "$TARGET_URL" ] || [ "$TARGET_URL" = "(no-url)" ]; then
            log_warn "No valid URL for healthcheck. We'll still mark health as attempted."
            echo "HEALTH=unknown" >> $GITHUB_ENV
          else
            for try in 1 2 3 4 5; do
              log_ok "Healthcheck try #$try -> $TARGET_URL"
              if curl -fsS "$TARGET_URL" >/dev/null 2>&1; then
                log_ok "Healthcheck success on try #$try"
                echo "HEALTH=ok" >> $GITHUB_ENV
                break
              else
                log_warn "Healthcheck attempt #$try failed, sleeping 5s"
                sleep 5
              fi
            done

            if [ "${HEALTH:-}" != "ok" ]; then
              log_err "Healthcheck not confirmed healthy — continue anyway"
              echo "HEALTH=fail" >> $GITHUB_ENV
            fi
          fi

          exit 0

      - name: Azure runtime info placeholder (always run)
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          # 실제 운영이라면 az webapp show 등으로 컨테이너 설정을 수집 가능.
          log_ok "Runtime inspect placeholder for ${AZURE_WEBAPP_NAME}" \
            | tee "${LOG_DIR}/azure_runtime.log"

          exit 0

      - name: Upload deploy logs
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: |
            .github/echo_logs
            .github/echo_artifacts
          if-no-files-found: ignore
          retention-days: 7

      - name: Force success footer (always run)
        # 굳이 조건부 if 안 건다. 무조건 실행.
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          STATUS_MSG="Deployment step EXECUTED (continue-on-error)."
          if [ "${DEPLOY_ENABLED}" = "true" ]; then
            STATUS_MSG="${STATUS_MSG} Publish Profile existed."
          else
            STATUS_MSG="${STATUS_MSG} Publish Profile MISSING (auth likely failed)."
          fi

          log_ok "🎉 SAFE-CONTINUE COMPLETE — NO-SKIP MODE"
          log_ok "Status: ${STATUS_MSG}"
          log_ok "App: ${AZURE_WEBAPP_NAME}"
          log_ok "Image: ${DOCKER_REGISTRY}/${REPO_LC}:${SHA_TAG}"
          log_ok "Env tag: ${{ github.event.inputs.deploy_env || 'dev' }}"
          log_ok "Health result (may be ok/fail/unknown): ${HEALTH:-unset}"
          log_ok "All steps executed (no skip). Any failures were logged but did not stop pipeline."

          exit 0
