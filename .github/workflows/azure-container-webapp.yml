name: "🐳 Azure WebApp Container Deploy — EchoOps SafeContinue"

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      deploy_env:        # 1
        description: "배포 환경 태그 (dev/stage/prod 등)"
        default: "dev"
        required: false
      extra_tag:         # 2
        description: "추가 커스텀 이미지 태그 (비워도 됨)"
        default: ""
        required: false
      run_healthcheck:   # 3
        description: "배포 후 curl로 헬스체크 할까요?"
        type: boolean
        default: true
      force_success_msg: # 4
        description: "실패해도 마지막에 성공 메시지 강제로 찍기"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write         # GHCR push
  id-token: write         # (미래 확장: OIDC 등)
  security-events: write  # 보안 스캔 업로드 가능성 대비

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/echo_artifacts
  AZURE_WEBAPP_NAME: your-app-name          # 실제 Web App 이름으로 바꿔주세요
  DOCKER_REGISTRY: ghcr.io
  IMAGE_REPO_RAW: ${{ github.repository }}  # Owner/Repo (대문자 포함)
  GIT_SHA: ${{ github.sha }}
  TS_NOW: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

concurrency:
  group: azure-webapp-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    name: "① Build & Push Image (GHCR)"
    runs-on: ubuntu-24.04

    steps:
      - name: Prep dirs + echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'EOF'
          TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
          log_ok(){   echo "✅ [$(TS)] $*"; }
          log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
          log_err(){  echo "❌ [$(TS)] $*" >&2; }
          safe_run(){
            local step="$1"; shift
            log_ok "▶ $step :: $*"
            if "$@"; then
              log_ok "$step OK"
            else
              rc=$?
              log_err "$step FAILED (exit=$rc) — continue anyway"
              return $rc
            fi
          }
          EOF
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Directories prepared: ${LOG_DIR}, ${ARTIFACT_DIR}"

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Lowercase owner/repo for GHCR
        id: lower
        shell: bash
        run: |
          set -Eeuo pipefail
          repo_lc="$(echo "${IMAGE_REPO_RAW}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LC=${repo_lc}" >> $GITHUB_ENV
          echo "SHA_TAG=${GIT_SHA}" >> $GITHUB_ENV
          # We'll also prep tags
          echo "LATEST_TAG=latest" >> $GITHUB_ENV
          echo "RUN_TAG=${TS_NOW}" >> $GITHUB_ENV
          echo "INPUT_TAG=${{ github.event.inputs.extra_tag }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.deploy_env }}" >> $GITHUB_ENV

      - name: Show resolved tags
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          log_ok "Base repo (lc): ${REPO_LC}"
          log_ok "Tags:"
          log_ok " - sha:    ${SHA_TAG}"
          log_ok " - latest: ${LATEST_TAG}"
          log_ok " - runid:  ${RUN_TAG}"
          log_ok " - extra:  ${INPUT_TAG}"
          log_ok "Deploy env: ${DEPLOY_ENV}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login GHCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build image (no push yet)
        id: build_local
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          IMG_BASE="${DOCKER_REGISTRY}/${REPO_LC}"
          log_ok "Building image locally: ${IMG_BASE}:${SHA_TAG}"
          safe_run docker build \
            --progress=plain \
            --file Dockerfile \
            --tag "${IMG_BASE}:${SHA_TAG}" \
            . | tee "${LOG_DIR}/docker_build.log"
          echo "IMG_BASE=${IMG_BASE}" >> $GITHUB_ENV

      - name: Push required tags (sha + runid)
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          safe_tag_push () {
            local tag="$1"
            if [ -n "$tag" ]; then
              docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${tag}" || true
              safe_run "docker.push.${tag}" docker push "${IMG_BASE}:${tag}"
            else
              log_warn "skip empty tag"
            fi
          }

          safe_tag_push "${SHA_TAG}"
          safe_tag_push "${RUN_TAG}"

      - name: Push optional tags (latest on main, custom extra_tag)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          # latest
          safe_run "docker.tag.latest" docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${LATEST_TAG}"
          safe_run "docker.push.latest" docker push "${IMG_BASE}:${LATEST_TAG}"

          # extra tag from dispatch input
          if [ -n "${INPUT_TAG}" ]; then
            safe_run "docker.tag.extra" docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${INPUT_TAG}"
            safe_run "docker.push.extra" docker push "${IMG_BASE}:${INPUT_TAG}"
          else
            log_warn "No extra_tag provided, skipping"
          fi

      - name: Security scan (Trivy-lite style placeholder)
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          # 실제 trivy 설치/스캔 대신 placeholder 로그만 남김.
          # 원하면 여기서 trivy 설치 후 --exit-code 0 로 강제 통과 가능.
          log_ok "Security scan placeholder for ${IMG_BASE}:${SHA_TAG}" | tee "${LOG_DIR}/security_scan.log"

      - name: Save logs as artifact (build phase)
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .github/echo_logs
            .github/echo_artifacts
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: "② Deploy to Azure Web App"
    runs-on: ubuntu-24.04
    needs: build-and-push
    environment:
      name: "Development"
      url: ${{ steps.deploy-webapp.outputs.webapp-url }}

    steps:
      - name: Prep dirs + echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'EOF'
          TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
          log_ok(){   echo "✅ [$(TS)] $*"; }
          log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
          log_err(){  echo "❌ [$(TS)] $*" >&2; }
          safe_run(){
            local step="$1"; shift
            log_ok "▶ $step :: $*"
            if "$@"; then
              log_ok "$step OK"
            else
              rc=$?
              log_err "$step FAILED (exit=$rc) — continue anyway"
              return $rc
            fi
          }
          EOF
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Deploy job started"

      - name: Recompute lowercase repo/tag info
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          repo_lc="$(echo "${IMAGE_REPO_RAW}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LC=${repo_lc}" >> $GITHUB_ENV
          echo "SHA_TAG=${GIT_SHA}" >> $GITHUB_ENV
          echo "IMG_BASE=${DOCKER_REGISTRY}/${repo_lc}" >> $GITHUB_ENV
          log_ok "Resolved image = ${DOCKER_REGISTRY}/${repo_lc}:${GIT_SHA}"

      - name: Deploy to Azure Web App
        id: deploy-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: '${{ env.DOCKER_REGISTRY }}/${{ env.REPO_LC }}:${{ env.SHA_TAG }}'

      - name: Dump azure deploy output
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          log_ok "Azure webapp URL (if provided): ${{ steps.deploy-webapp.outputs.webapp-url }}" \
            | tee "${LOG_DIR}/azure_deploy.log"

      - name: Healthcheck (optional curl)
        if: ${{ github.event.inputs.run_healthcheck == 'true' || github.event.inputs.run_healthcheck == '' }}
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          TARGET_URL="${{ steps.deploy-webapp.outputs.webapp-url }}"
          if [ -z "$TARGET_URL" ]; then
            log_warn "No webapp-url output from deploy step. Skipping healthcheck."
            exit 0
          fi

          for try in 1 2 3 4 5; do
            log_ok "Healthcheck try #$try -> $TARGET_URL"
            if curl -fsS "$TARGET_URL" >/dev/null 2>&1; then
              log_ok "Healthcheck success on try #$try"
              echo "HEALTH=ok" >> $GITHUB_ENV
              break
            else
              log_warn "Healthcheck attempt #$try failed, sleeping 5s"
              sleep 5
            fi
          done

          if [ "${HEALTH:-}" != "ok" ]; then
            log_err "Healthcheck failed after retries (continuing anyway)"
          fi

      - name: Capture runtime info (az config placeholder)
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          # 여기서는 실제 az cli 로그인/쿼리를 하지 않고, 자리표시자 로그만 남깁니다.
          # 실제 prod라면:
          #   - azure/login@v2 사용 (OIDC or service principal)
          #   - az webapp show --name "${AZURE_WEBAPP_NAME}" ...
          log_ok "Azure runtime inspection placeholder for ${AZURE_WEBAPP_NAME}" \
            | tee "${LOG_DIR}/azure_runtime.log"

      - name: Upload deploy logs
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: |
            .github/echo_logs
            .github/echo_artifacts
          if-no-files-found: ignore
          retention-days: 7

      - name: Force success footer
        if: ${{ github.event.inputs.force_success_msg == 'true' || github.event.inputs.force_success_msg == '' }}
        shell: bash
        run: |
          . /tmp/echo_helpers.sh
          log_ok "🎉 Deployment pipeline completed (safe-continue)."
          log_ok "App: ${AZURE_WEBAPP_NAME}"
          log_ok "Image: ${DOCKER_REGISTRY}/${REPO_LC}:${SHA_TAG}"
          log_ok "Environment(tag): ${{ github.event.inputs.deploy_env || 'dev' }}"
          log_ok "Even if some steps failed, workflow ends with SUCCESS by design."
