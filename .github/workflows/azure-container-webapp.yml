name: "🐳 Azure WebApp Container Deploy — EchoOps SafeContinue (rev3)"

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      deploy_env:        # 1
        description: "배포 환경 태그 (dev/stage/prod 등)"
        default: "dev"
        required: false
      extra_tag:         # 2
        description: "추가 커스텀 이미지 태그 (비워도 됨)"
        default: ""
        required: false
      run_healthcheck:   # 3
        description: "배포 후 curl로 헬스체크 할까요?"
        type: boolean
        default: true
      force_success_msg: # 4
        description: "실패해도 마지막에 성공 메시지 강제로 찍기"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write      # GHCR push
  id-token: write      # OIDC (미래 확장)
  security-events: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/echo_artifacts
  AZURE_WEBAPP_NAME: your-app-name            # 실제 Azure Web App 이름
  DOCKER_REGISTRY: ghcr.io
  IMAGE_REPO_RAW: ${{ github.repository }}    # ex) koreatest12/koreakimtest
  GIT_SHA: ${{ github.sha }}
  TS_NOW: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

concurrency:
  group: azure-webapp-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    name: "① Build & Push Image (GHCR)"
    runs-on: ubuntu-24.04

    steps:
      - name: Init dirs + helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'EOF'
          TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
          log_ok(){   echo "✅ [$(TS)] $*"; }
          log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
          log_err(){  echo "❌ [$(TS)] $*" >&2; }
          safe_run() {
            local step="$1"; shift
            log_ok "▶ ${step} :: $*"
            mkdir -p "${LOG_DIR:-.github/echo_logs}" "${ARTIFACT_DIR:-.github/echo_artifacts}" || true
            "$@" 2>&1
            rc=$?
            if [ $rc -eq 0 ]; then
              log_ok "${step} OK"
            else
              log_err "${step} FAILED (exit=${rc}) — continue anyway"
            fi
            return 0  # <- 항상 0으로 돌려서 step 안죽게
          }
          EOF
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Helpers ready. Dirs ready: ${LOG_DIR}, ${ARTIFACT_DIR}"

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Prepare tag/env variables
        id: prep
        shell: bash
        run: |
          set -Eeuo pipefail
          . /tmp/echo_helpers.sh
          repo_lc="$(echo "${IMAGE_REPO_RAW}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LC=${repo_lc}"                                  >> $GITHUB_ENV
          echo "SHA_TAG=${GIT_SHA}"                                  >> $GITHUB_ENV
          echo "LATEST_TAG=latest"                                   >> $GITHUB_ENV
          echo "RUN_TAG=${TS_NOW}"                                   >> $GITHUB_ENV
          echo "INPUT_TAG=${{ github.event.inputs.extra_tag }}"      >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.deploy_env }}"    >> $GITHUB_ENV
          echo "IMG_BASE=${DOCKER_REGISTRY}/${repo_lc}"              >> $GITHUB_ENV

          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          log_ok "Repo lowercased: ${repo_lc}"
          log_ok "Image base: ${DOCKER_REGISTRY}/${repo_lc}"
          log_ok "Tags -> sha:${GIT_SHA}, run:${TS_NOW}, latest:latest, extra:${{ github.event.inputs.extra_tag }}"
          log_ok "Deploy env: ${{ github.event.inputs.deploy_env }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login GHCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker build (tag :sha)
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          safe_run "docker.build" \
            docker build \
              --progress=plain \
              --file Dockerfile \
              --tag "${IMG_BASE}:${SHA_TAG}" \
              .
          exit 0

      - name: Push sha & runid tags
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          # push :sha
          safe_run "docker.push.sha" docker push "${IMG_BASE}:${SHA_TAG}"

          # tag/push :runid
          docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${RUN_TAG}" 2>/dev/null
          safe_run "docker.push.runid" docker push "${IMG_BASE}:${RUN_TAG}"

          exit 0

      - name: Push latest & extra_tag (only on main)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          # latest
          docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${LATEST_TAG}" 2>/dev/null
          safe_run "docker.push.latest" docker push "${IMG_BASE}:${LATEST_TAG}"

          # extra tag
          if [ -n "${INPUT_TAG}" ]; then
            docker tag "${IMG_BASE}:${SHA_TAG}" "${IMG_BASE}:${INPUT_TAG}" 2>/dev/null
            safe_run "docker.push.extra" docker push "${IMG_BASE}:${INPUT_TAG}"
          else
            log_warn "No extra_tag provided, skipping extra push"
          fi

          exit 0

      - name: Security scan placeholder
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          log_ok "Security scan placeholder for ${IMG_BASE}:${SHA_TAG}" > "${LOG_DIR}/security_scan.log"
          exit 0

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .github/echo_logs
            .github/echo_artifacts
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: "② Deploy to Azure Web App"
    runs-on: ubuntu-24.04
    needs: build-and-push
    environment:
      name: "Development"
      url: ${{ steps.deploy-webapp.outputs.webapp-url }}

    steps:
      - name: Init dirs + helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'EOF'
          TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
          log_ok(){   echo "✅ [$(TS)] $*"; }
          log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
          log_err(){  echo "❌ [$(TS)] $*" >&2; }
          safe_run() {
            local step="$1"; shift
            log_ok "▶ ${step} :: $*"
            mkdir -p "${LOG_DIR:-.github/echo_logs}" "${ARTIFACT_DIR:-.github/echo_artifacts}" || true
            "$@" 2>&1
            rc=$?
            if [ $rc -eq 0 ]; then
              log_ok "${step} OK"
            else
              log_err "${step} FAILED (exit=${rc}) — continue anyway"
            fi
            return 0
          }
          EOF
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Deploy helpers ready"

      - name: Recompute image refs
        shell: bash
        run: |
          set -Eeuo pipefail
          . /tmp/echo_helpers.sh
          repo_lc="$(echo "${IMAGE_REPO_RAW}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LC=${repo_lc}"                              >> $GITHUB_ENV
          echo "IMG_BASE=${DOCKER_REGISTRY}/${repo_lc}"          >> $GITHUB_ENV
          echo "SHA_TAG=${GIT_SHA}"                              >> $GITHUB_ENV
          log_ok "Will deploy image: ${DOCKER_REGISTRY}/${repo_lc}:${GIT_SHA}"
          log_ok "Target WebApp: ${AZURE_WEBAPP_NAME}"

      #################################################################
      # (A) OPTIONAL LOGIN STEP (service principal 방식)
      # - 만약 secrets.AZURE_CREDENTIALS 가 존재하면 Azure에 로그인하고
      #   이후 webapps-deploy를 자격증명 없이 써도 됨.
      # - 없으면 그냥 넘어가고 publish-profile 모드로 배포.
      #################################################################
      - name: Try Azure login (optional OIDC/SP)
        if: ${{ secrets.AZURE_CREDENTIALS != '' }}
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          log_ok "Attempting azure/login@v2 using AZURE_CREDENTIALS..."
          exit 0
      - name: Azure Login Action (real login if creds exist)
        if: ${{ secrets.AZURE_CREDENTIALS != '' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # OIDC 패턴으로 갈 때는 creds 대신 client-id/subscription-id/tenant-id + id-token 사용 가능
          # 지금은 service principal JSON (AZURE_CREDENTIALS) 기반 가정

      #################################################################
      # 핵심: publish-profile 로 컨테이너 이미지 배포
      #  - publish-profile 없으면 실패할 수 있으므로 반드시 저장 필요
      #  - slot-name, package 제거 (이미지 모드에 불필요하고 혼란 유발)
      #################################################################
      - name: Deploy to Azure Web App (publish-profile mode)
        id: deploy-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: '${{ env.DOCKER_REGISTRY }}/${{ env.REPO_LC }}:${{ env.SHA_TAG }}'

      - name: Record deploy output
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          DEPLOY_URL="${{ steps.deploy-webapp.outputs.webapp-url }}"
          if [ -z "$DEPLOY_URL" ]; then
            log_warn "webapps-deploy didn't emit webapp-url output."
          else
            log_ok "Azure webapp-url -> $DEPLOY_URL"
          fi
          echo "$DEPLOY_URL" > "${LOG_DIR}/deploy_url.txt"
          exit 0

      - name: Healthcheck (optional)
        if: ${{ github.event.inputs.run_healthcheck == 'true' || github.event.inputs.run_healthcheck == '' }}
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          TARGET_URL="$(cat ${LOG_DIR}/deploy_url.txt 2>/dev/null || true)"

          if [ -z "$TARGET_URL" ]; then
            log_warn "No URL found for healthcheck. Skipping."
            echo "HEALTH=skip" >> $GITHUB_ENV
          else
            for try in 1 2 3 4 5; do
              log_ok "Healthcheck try #$try -> $TARGET_URL"
              if curl -fsS "$TARGET_URL" >/dev/null 2>&1; then
                log_ok "Healthcheck success on try #$try"
                echo "HEALTH=ok" >> $GITHUB_ENV
                break
              else
                log_warn "Healthcheck attempt #$try failed, sleep 5s"
                sleep 5
              fi
            done

            if [ "${HEALTH:-}" != "ok" ]; then
              log_err "Healthcheck failed after retries — continue anyway"
            fi
          fi
          exit 0

      - name: Azure runtime info placeholder
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          # 실제 운영에서는 여기서 az cli로 현재 설정된 이미지/환경변수도 캐싱 가능:
          #   az webapp show --name "${AZURE_WEBAPP_NAME}" --resource-group <RG>
          # 여기서는 placeholder만
          log_ok "Runtime inspect placeholder for ${AZURE_WEBAPP_NAME}" \
            | tee "${LOG_DIR}/azure_runtime.log"
          exit 0

      - name: Upload deploy logs
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: |
            .github/echo_logs
            .github/echo_artifacts
          if-no-files-found: ignore
          retention-days: 7

      - name: Force success footer
        if: ${{ github.event.inputs.force_success_msg == 'true' || github.event.inputs.force_success_msg == '' }}
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          log_ok "🎉 SAFE-CONTINUE COMPLETE"
          log_ok "App: ${AZURE_WEBAPP_NAME}"
          log_ok "Image: ${DOCKER_REGISTRY}/${REPO_LC}:${SHA_TAG}"
          log_ok "Env tag: ${{ github.event.inputs.deploy_env || 'dev' }}"
          log_ok "Some steps may have failed, but pipeline reached the final checkpoint by design."
          exit 0
