name: "🐳 Azure WebApp Container Deploy — EchoOps SafeContinue (rev12)"

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: "배포 환경 태그 (dev/stage/prod 등)"
        default: "dev"
        required: false
      extra_tag:
        description: "추가 커스텀 이미지 태그 (비워도 됨)"
        default: ""
        required: false
      run_healthcheck:
        description: "배포 후 curl로 헬스체크 할까요?"
        type: boolean
        default: true
      force_success_msg:
        description: "실패해도 마지막에 성공 메시지 강제로 찍기"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write      # GHCR push
  id-token: write      # OIDC 인증을 위해 반드시 필요합니다.
  security-events: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/echo_artifacts
  
  # ⚠️ 필수 시크릿 (OIDC 인증용)
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # ex) koreatest12/koreakimtest
  
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # 헬퍼 스크립트를 상단 env로 추출 (DRY)
  HELPER_SCRIPT: |
    TS(){ date "+%Y-%m-%d %H:%M:%S%z"; }
    log_ok(){   echo "✅ [$(TS)] $*"; }
    log_warn(){ echo "⚠️  [$(TS)] $*" >&2; }
    log_err(){  echo "❌ [$(TS)] $*" >&2; }
    safe_run() {
      local step="$1"; shift
      log_ok "▶ ${step} :: $*"
      mkdir -p "${LOG_DIR:-.github/echo_logs}" "${ARTIFACT_DIR:-.github/echo_artifacts}" || true
      "$@" 2>&1
      rc=$?
      if [ $rc -eq 0 ]; then
        log_ok "${step} OK"
      else
        log_err "${step} FAILED (exit=${rc}) — continue anyway"
      fi
      return 0  # 항상 0으로 반환 → 이 step은 실패로 안 죽음
    }

concurrency:
  group: azure-webapp-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    name: "① Build & Push Image (GHCR)"
    runs-on: ubuntu-24.04
    outputs:
      # deploy 잡에 전달할 이미지 태그 (git sha 기준)
      image_sha_tag: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
    steps:
      - name: Init dirs + helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          echo "${HELPER_SCRIPT}" > /tmp/echo_helpers.sh
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Helpers ready. Dirs ready: ${LOG_DIR}, ${ARTIFACT_DIR}"

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login GHCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ github.event.inputs.extra_tag }},enable=${{ github.event.inputs.extra_tag != '' }}

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        continue-on-error: true # 👈 GHCR push 실패해도 다음 스텝 진행

      - name: Security scan placeholder
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          
          log_ok "Security scan placeholder for image..."
          log_ok "Tags pushed: ${{ steps.meta.outputs.tags }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}" > "${LOG_DIR}/security_scan.log"
          exit 0

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.LOG_DIR }}
            ${{ env.ARTIFACT_DIR }}
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: "② Deploy to Azure Web App"
    runs-on: ubuntu-24.04
    needs: build-and-push
    environment:
      name: "Development" 
    
    steps:
      - name: Init dirs + helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          echo "${HELPER_SCRIPT}" > /tmp/echo_helpers.sh
          chmod +x /tmp/echo_helpers.sh
          . /tmp/echo_helpers.sh
          log_ok "Deploy helpers ready"

      - name: Get deploy metadata from build job
        shell: bash
        run: |
          set -Eeuo pipefail
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          
          # build 잡의 output을 env var로 등록
          echo "IMAGE_TO_DEPLOY=${{ needs.build-and-push.outputs.image_sha_tag }}" >> $GITHUB_ENV
          
          log_ok "Will deploy image: ${{ needs.build-and-push.outputs.image_sha_tag }}"
          log_ok "Target WebApp: ${{ env.AZURE_WEBAPP_NAME }}"

      #################################################################
      # OIDC 인증 스텝 (실패해도 계속 진행)
      #################################################################
      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
        continue-on-error: true # 👈 인증 실패해도 다음 스텝 진행 (핵심)

      #################################################################
      # 실제 컨테이너 이미지 배포 (실패해도 계속 진행)
      #################################################################
      - name: Deploy to Azure Web App (OIDC mode)
        id: deploy-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: '${{ env.IMAGE_TO_DEPLOY }}'
        continue-on-error: true # 👈 배포 자체 실패해도 다음 스텝 진행 (핵심)

      - name: Record deploy output
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"

          DEPLOY_URL="${{ steps.deploy-webapp.outputs.webapp-url }}"
          if [ -z "$DEPLOY_URL" ]; then
            log_warn "webapps-deploy didn't emit webapp-url output."
          else
            log_ok "Azure webapp-url -> $DEPLOY_URL"
          fi
          echo "$DEPLOY_URL" > "${LOG_DIR}/deploy_url.txt"
          exit 0

      - name: Healthcheck (optional)
        if: github.event.inputs.run_healthcheck == 'true' || github.event.inputs.run_healthcheck == ''
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          
          TARGET_URL="$(cat ${LOG_DIR}/deploy_url.txt 2>/dev/null || true)"
          if [ -z "$TARGET_URL" ]; then
            log_warn "No URL found for healthcheck. Skipping."
            echo "HEALTH=skip" >> $GITHUB_ENV
          else
            for try in 1 2 3 4 5; do
              log_ok "Healthcheck try #$try -> $TARGET_URL"
              if curl -fsS "$TARGET_URL" >/dev/null 2>&1; then
                log_ok "Healthcheck success on try #$try"
                echo "HEALTH=ok" >> $GITHUB_ENV
                break
              else
                log_warn "Healthcheck attempt #$try failed, sleep 5s"
                sleep 5
              fi
            done
            if [ "${HEALTH:-}" != "ok" ]; then
              log_err "Healthcheck failed after retries — continue anyway"
            fi
          fi
          exit 0

      - name: Azure runtime info placeholder
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          
          safe_run "azure.runtime.info" \
            echo "Runtime inspect placeholder for ${AZURE_WEBAPP_NAME}" \
            | tee "${LOG_DIR}/azure_runtime.log"
            
          exit 0

      - name: Upload deploy logs
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: |
            ${{ env.LOG_DIR }}
            ${{ env.ARTIFACT_DIR }}
          if-no-files-found: ignore
          retention-days: 7

      - name: Force success footer
        if: ${{ github.event.inputs.force_success_msg == 'true' || github.event.inputs.force_success_msg == '' }}
        shell: bash
        run: |
          set +e
          . /tmp/echo_helpers.sh
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          
          STATUS_MSG="Deployment process COMPLETED (Failure is possible but SafeContinue was enforced)."

          log_ok "🎉 SAFE-CONTINUE COMPLETE"
          log_ok "Status: ${STATUS_MSG}"
          log_ok "App: ${AZURE_WEBAPP_NAME:- (Not Set) }"
          log_ok "Image: ${{ env.IMAGE_TO_DEPLOY }}"
          log_ok "Env tag: ${{ github.event.inputs.deploy_env || 'dev' }}"
          log_ok "All steps were attempted, regardless of errors."
          exit 0
