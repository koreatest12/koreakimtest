name: banking-data-pipeline

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        db: [postgres, mysql, mariadb, sqlite, duckdb]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system clients (psql, mysqlclient)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client mysql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start database container
        env:
          DB: ${{ matrix.db }}
        run: |
          set -euxo pipefail
          case "$DB" in
            postgres)
              docker run -d --name pgdb -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=bank -p 5432:5432 postgres:16
              ;;
            mysql)
              docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=bank -p 3306:3306 mysql:8
              ;;
            mariadb)
              docker run -d --name mariadb -e MARIADB_ROOT_PASSWORD=password -e MARIADB_DATABASE=bank -p 3307:3306 mariadb:11
              ;;
            sqlite|duckdb)
              echo "No external DB container required for $DB"
              ;;
            *) echo "Unsupported DB $DB"; exit 1 ;;
          esac

      - name: Wait for DB readiness
        env:
          DB: ${{ matrix.db }}
        run: |
          set -euxo pipefail
          if [ "$DB" = "postgres" ]; then
            for i in $(seq 1 60); do pg_isready -h localhost -p 5432 -U postgres && break || sleep 2; done
          elif [ "$DB" = "mysql" ]; then
            for i in $(seq 1 90); do mysqladmin ping -h 127.0.0.1 -P 3306 -ppassword && break || sleep 2; done
          elif [ "$DB" = "mariadb" ]; then
            for i in $(seq 1 90); do mysqladmin ping -h 127.0.0.1 -P 3307 -ppassword && break || sleep 2; done
          else
            echo "No readiness wait needed for $DB"
          fi

      - name: Run pipeline
        env:
          DB_USER: ${{ matrix.db == 'postgres' && 'postgres' || 'root' }}
          DB_PASSWORD: ${{ matrix.db == 'postgres' && 'postgres' || 'password' }}
          DB_HOST: localhost
          DB_PORT: ${{ matrix.db == 'postgres' && '5432' || (matrix.db == 'mysql' && '3306' || (matrix.db == 'mariadb' && '3307' || '') ) }}
          DB_NAME: bank
        run: |
          set -euxo pipefail
          python -m banking_pipeline.pipeline --target ${{ matrix.db }} --rows 20000 --seed 42 --out artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.db }}
          path: artifacts/${{ matrix.db }}
