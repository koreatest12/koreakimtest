name: banking-data-pipeline

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run-pipeline:
    # 5가지 데이터베이스에 대해 병렬로 파이프라인 실행
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        db: [postgres, mysql, mariadb, sqlite, duckdb]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Python 환경 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 시스템 클라이언트 설치 (psql, mysql-client)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client mysql-client

      - name: Python 의존성 설치 (cryptography 포함)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 필요한 데이터베이스 컨테이너 시작
      - name: 데이터베이스 컨테이너 시작
        env:
          DB: ${{ matrix.db }}
        run: |
          set -euxo pipefail
          case "$DB" in
            postgres)
              docker run -d --name pgdb -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=bank -p 5432:5432 postgres:16
              ;;
            mysql)
              docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=bank -p 3306:3306 mysql:8
              ;;
            mariadb)
              # MariaDB는 호스트 포트 3307 사용
              docker run -d --name mariadb -e MARIADB_ROOT_PASSWORD=password -e MARIADB_DATABASE=bank -p 3307:3306 mariadb:11
              ;;
            sqlite|duckdb)
              echo "파일 기반 DB는 외부 컨테이너가 필요하지 않습니다."
              ;;
            *) echo "지원되지 않는 DB ${DB}"; exit 1 ;;
          esac

      # DB 준비 상태 대기
      - name: DB 준비 상태 대기
        env:
          DB: ${{ matrix.db }}
        run: |
          set -euxo pipefail
          if [ "$DB" = "postgres" ]; then
            for i in $(seq 1 60); do pg_isready -h localhost -p 5432 -U postgres && break || sleep 2; done
          elif [ "$DB" = "mysql" ]; then
            for i in $(seq 1 90); do mysqladmin ping -h 127.0.0.1 -P 3306 -ppassword && break || sleep 2; done
          elif [ "$DB" = "mariadb" ]; then
            for i in $(seq 1 90); do mysqladmin ping -h 127.0.0.1 -P 3307 -ppassword && break || sleep 2; done
          else
            echo "파일 기반 DB는 대기 시간이 필요하지 않습니다."
          fi

      # 파이프라인 실행
      - name: 뱅킹 파이프라인 실행
        env:
          DB_USER: ${{ matrix.db == 'postgres' && 'postgres' || 'root' }}
          DB_PASSWORD: ${{ matrix.db == 'postgres' && 'postgres' || 'password' }}
          DB_HOST: localhost
          # 파일 기반 DB의 경우 '0'으로 설정하여 Python에서 정수 변환 오류 방지
          DB_PORT: ${{ matrix.db == 'postgres' && '5432' || (matrix.db == 'mysql' && '3306' || (matrix.db == 'mariadb' && '3307' || '0') ) }}
          DB_NAME: bank
        run: |
          set -euxo pipefail
          python -m banking_pipeline.pipeline \
            --target ${{ matrix.db }} \
            --rows 20000 \
            --seed 42 \
            --out artifacts

      # 결과 보고서 아티팩트 업로드
      - name: 보고서 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.db }}
          path: artifacts/${{ matrix.db }}
